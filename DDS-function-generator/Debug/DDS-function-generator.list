
DDS-function-generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005334  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005b80  08005b80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b80  08005b80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08005bf8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005bf8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110ab  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abf  00000000  00000000  00031144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00033c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c27  00000000  00000000  000357e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123c3  00000000  00000000  0004e40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008baf0  00000000  00000000  000607d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec2c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  000ec318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005428 	.word	0x08005428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005428 	.word	0x08005428

0800014c <DDS_Init>:

/**************************************
 * Initialize the DDS waveform generator
 **************************************/
void DDS_Init(	DDS *dds, const uint8_t *wavetable, uint16_t wavetableSize, WaveformType waveType, uint32_t freq, uint32_t amp,
				GPIO_TypeDef *gpio, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htimOffset) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	460b      	mov	r3, r1
 800015c:	80fb      	strh	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]

	dds->gpio = gpio;	// NOTE: the lower 8 pins of the port must be previously
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	6a3a      	ldr	r2, [r7, #32]
 8000166:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
						// configured as outputs and with max output speed
	dds->htim = htim;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800016e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	dds->htimOffset = htimOffset;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000176:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	DDS_ChangeWaveform(dds, wavetable, wavetableSize, waveType);	// set the requested waveform
 800017a:	797b      	ldrb	r3, [r7, #5]
 800017c:	88fa      	ldrh	r2, [r7, #6]
 800017e:	68b9      	ldr	r1, [r7, #8]
 8000180:	68f8      	ldr	r0, [r7, #12]
 8000182:	f000 f95f 	bl	8000444 <DDS_ChangeWaveform>
	DDS_ChangeFrequency(dds, freq);									// set the requested frequency
 8000186:	69b9      	ldr	r1, [r7, #24]
 8000188:	68f8      	ldr	r0, [r7, #12]
 800018a:	f000 f923 	bl	80003d4 <DDS_ChangeFrequency>
	DDS_ChangeAmplitude(dds, amp);									// set the requested amplitude
 800018e:	69f9      	ldr	r1, [r7, #28]
 8000190:	68f8      	ldr	r0, [r7, #12]
 8000192:	f000 f937 	bl	8000404 <DDS_ChangeAmplitude>

	// enable timer DMA request when timer overflows
	__HAL_TIM_ENABLE_DMA(dds->htim, TIM_DMA_UPDATE);
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	68da      	ldr	r2, [r3, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80001ac:	60da      	str	r2, [r3, #12]

	dds->running = 0;	// by default, waveform generator is not running
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2200      	movs	r2, #0
 80001b2:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

	DDS_Update(dds);	// update the changes
 80001b6:	68f8      	ldr	r0, [r7, #12]
 80001b8:	f000 f854 	bl	8000264 <DDS_Update>

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <DDS_Start>:

/**************************************
 * Start DDS waveform generation
 **************************************/
void DDS_Start(DDS *dds) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	// reset the timer to 0
	__HAL_TIM_SET_COUNTER(dds->htim, 0);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2200      	movs	r2, #0
 80001d6:	625a      	str	r2, [r3, #36]	; 0x24
	// start the timer
	HAL_TIM_Base_Start(dds->htim);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80001de:	4618      	mov	r0, r3
 80001e0:	f003 fbac 	bl	800393c <HAL_TIM_Base_Start>
	// start the dma transfer
	HAL_DMA_Start(dds->htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&dds->wavetable, (uint32_t)&dds->gpio->ODR, dds->wavetableSize);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80001ea:	6a18      	ldr	r0, [r3, #32]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3309      	adds	r3, #9
 80001f0:	4619      	mov	r1, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80001f8:	330c      	adds	r3, #12
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8000202:	f001 ff87 	bl	8002114 <HAL_DMA_Start>
	// start the timer for PWM generation
	HAL_TIM_PWM_Start(dds->htimOffset, TIM_CHANNEL_3);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800020c:	2108      	movs	r1, #8
 800020e:	4618      	mov	r0, r3
 8000210:	f003 fca6 	bl	8003b60 <HAL_TIM_PWM_Start>
	// update the running flag
	dds->running = 1;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2201      	movs	r2, #1
 8000218:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <DDS_Stop>:

/**************************************
 * Stop the current DDS waveform
 * generation
 **************************************/
void DDS_Stop(DDS *dds) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	// abort the dma transfer
	HAL_DMA_Abort(dds->htim->hdma[TIM_DMA_ID_UPDATE]);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4618      	mov	r0, r3
 8000236:	f001 ffaf 	bl	8002198 <HAL_DMA_Abort>
	// stop the timer
	HAL_TIM_Base_Stop(dds->htim);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000240:	4618      	mov	r0, r3
 8000242:	f003 fbc5 	bl	80039d0 <HAL_TIM_Base_Stop>
	// stop the timer for PWM
	HAL_TIM_PWM_Stop(dds->htimOffset, TIM_CHANNEL_3);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800024c:	2108      	movs	r1, #8
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fd28 	bl	8003ca4 <HAL_TIM_PWM_Stop>
	// update the running flag
	dds->running = 0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <DDS_Update>:
 * Update the DDS waveform
 * This function should be called
 * after changing the frequency, amplitude
 * and/or waveform
 **************************************/
void DDS_Update(DDS *dds) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	uint8_t wasRunning = dds->running;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000272:	72fb      	strb	r3, [r7, #11]
	// stop the current DDS waveform generation
	if(wasRunning) {
 8000274:	7afb      	ldrb	r3, [r7, #11]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d002      	beq.n	8000280 <DDS_Update+0x1c>
		DDS_Stop(dds);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ffd2 	bl	8000224 <DDS_Stop>
	 *   maximum number of samples (i.e. 32)
	 *
	 *   This bounds may be chosen by noting
	 *   the ARR values, nut for now this will do
	 */
	uint8_t k = 1;
 8000280:	2301      	movs	r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]

	if(dds->freq <= 1000) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800028c:	d808      	bhi.n	80002a0 <DDS_Update+0x3c>
		dds->wavetableSize = dds->unmodifiedWavetableSize;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		k = 1;
 800029a:	2301      	movs	r3, #1
 800029c:	73fb      	strb	r3, [r7, #15]
 800029e:	e030      	b.n	8000302 <DDS_Update+0x9e>
	} else if(dds->freq <= 5000) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d80a      	bhi.n	80002c2 <DDS_Update+0x5e>
		dds->wavetableSize = dds->unmodifiedWavetableSize / 2;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80002b2:	085b      	lsrs	r3, r3, #1
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		k = 2;
 80002bc:	2302      	movs	r3, #2
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	e01f      	b.n	8000302 <DDS_Update+0x9e>
	} else if(dds->freq <= 10000) {
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d80a      	bhi.n	80002e4 <DDS_Update+0x80>
		dds->wavetableSize = dds->unmodifiedWavetableSize / 4;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80002d4:	089b      	lsrs	r3, r3, #2
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		k = 4;
 80002de:	2304      	movs	r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	e00e      	b.n	8000302 <DDS_Update+0x9e>
	} else if(dds->freq <= 100000) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a36      	ldr	r2, [pc, #216]	; (80003c4 <DDS_Update+0x160>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d809      	bhi.n	8000302 <DDS_Update+0x9e>
		dds->wavetableSize = dds->unmodifiedWavetableSize / 8;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80002f4:	08db      	lsrs	r3, r3, #3
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		k = 8;
 80002fe:	2308      	movs	r3, #8
 8000300:	73fb      	strb	r3, [r7, #15]
	}
	for(uint16_t i = 0; i < dds->wavetableSize; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	81bb      	strh	r3, [r7, #12]
 8000306:	e01a      	b.n	800033e <DDS_Update+0xda>
		dds->wavetable[i] = (uint8_t)(((uint16_t)dds->unmodifiedWavetable[k*i]*dds->amp)/DDS_MAX_AMP);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800030e:	7bfa      	ldrb	r2, [r7, #15]
 8000310:	89b9      	ldrh	r1, [r7, #12]
 8000312:	fb01 f202 	mul.w	r2, r1, r2
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	fb03 f302 	mul.w	r3, r3, r2
 8000324:	4a28      	ldr	r2, [pc, #160]	; (80003c8 <DDS_Update+0x164>)
 8000326:	fba2 2303 	umull	r2, r3, r2, r3
 800032a:	099a      	lsrs	r2, r3, #6
 800032c:	89bb      	ldrh	r3, [r7, #12]
 800032e:	b2d1      	uxtb	r1, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4413      	add	r3, r2
 8000334:	460a      	mov	r2, r1
 8000336:	725a      	strb	r2, [r3, #9]
	for(uint16_t i = 0; i < dds->wavetableSize; i++) {
 8000338:	89bb      	ldrh	r3, [r7, #12]
 800033a:	3301      	adds	r3, #1
 800033c:	81bb      	strh	r3, [r7, #12]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8000344:	89ba      	ldrh	r2, [r7, #12]
 8000346:	429a      	cmp	r2, r3
 8000348:	d3de      	bcc.n	8000308 <DDS_Update+0xa4>
	 *
	 * NOTE: other configurations for the timer must
	 * be done previously (e.g. by using CubeMX):
	 * - Set PSC for 10 MHz timer clock frequency
	 *********************************************/
	__HAL_TIM_SET_AUTORELOAD(dds->htim, ((uint32_t)DDS_TIM_FREQ)/(dds->wavetableSize*dds->freq) - 1);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	fb03 f302 	mul.w	r3, r3, r2
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <DDS_Update+0x168>)
 800035c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3a01      	subs	r2, #1
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8000372:	461a      	mov	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	fb03 f302 	mul.w	r3, r3, r2
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <DDS_Update+0x168>)
 800037e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000388:	3a01      	subs	r2, #1
 800038a:	60da      	str	r2, [r3, #12]
	 * - Only increment memory address
	 * - Circular mode
	 *********************************************/

	// set the correct duty cycle value for PWM
	__HAL_TIM_SET_COMPARE(dds->htimOffset, TIM_CHANNEL_3, ((dds->amp*DDS_TIM_PWM_MAX_DC)/3300 - 1)/2);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <DDS_Update+0x16c>)
 800039c:	fba2 2303 	umull	r2, r3, r2, r3
 80003a0:	095b      	lsrs	r3, r3, #5
 80003a2:	1e5a      	subs	r2, r3, #1
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	0852      	lsrs	r2, r2, #1
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c

	// start the new DDS waveform generation
	if(wasRunning) {
 80003b0:	7afb      	ldrb	r3, [r7, #11]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d002      	beq.n	80003bc <DDS_Update+0x158>
		DDS_Start(dds);
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ff04 	bl	80001c4 <DDS_Start>
	}
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	000186a0 	.word	0x000186a0
 80003c8:	057619f1 	.word	0x057619f1
 80003cc:	00dbba00 	.word	0x00dbba00
 80003d0:	09ee009f 	.word	0x09ee009f

080003d4 <DDS_ChangeFrequency>:

/**************************************
 * Change DDS waveform frequency
 **************************************/
void DDS_ChangeFrequency(DDS *dds, uint32_t freq) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	if(freq > DDS_MAX_FREQ) {
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <DDS_ChangeFrequency+0x2c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d903      	bls.n	80003ee <DDS_ChangeFrequency+0x1a>
		dds->freq = DDS_MAX_FREQ;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <DDS_ChangeFrequency+0x2c>)
 80003ea:	601a      	str	r2, [r3, #0]
	} else {
		dds->freq = freq;
	}
}
 80003ec:	e002      	b.n	80003f4 <DDS_ChangeFrequency+0x20>
		dds->freq = freq;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	000186a0 	.word	0x000186a0

08000404 <DDS_ChangeAmplitude>:

/**************************************
 * Change DDS waveform amplitude
 **************************************/
void DDS_ChangeAmplitude(DDS *dds, uint32_t amp) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	if(amp < DDS_MIN_AMP) {
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000414:	d204      	bcs.n	8000420 <DDS_ChangeAmplitude+0x1c>
		dds->amp = DDS_MIN_AMP;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800041c:	605a      	str	r2, [r3, #4]
	} else if (amp > DDS_MAX_AMP){
		dds->amp = DDS_MAX_AMP;
	} else {
		dds->amp = amp;
	}
}
 800041e:	e00c      	b.n	800043a <DDS_ChangeAmplitude+0x36>
	} else if (amp > DDS_MAX_AMP){
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000426:	4293      	cmp	r3, r2
 8000428:	d904      	bls.n	8000434 <DDS_ChangeAmplitude+0x30>
		dds->amp = DDS_MAX_AMP;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000430:	605a      	str	r2, [r3, #4]
}
 8000432:	e002      	b.n	800043a <DDS_ChangeAmplitude+0x36>
		dds->amp = amp;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	605a      	str	r2, [r3, #4]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <DDS_ChangeWaveform>:

/**************************************
 * Change DDS waveform
 **************************************/
void DDS_ChangeWaveform(DDS *dds, const uint8_t *wavetable, uint16_t wavetableSize, WaveformType waveType) {
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	4611      	mov	r1, r2
 8000450:	461a      	mov	r2, r3
 8000452:	460b      	mov	r3, r1
 8000454:	80fb      	strh	r3, [r7, #6]
 8000456:	4613      	mov	r3, r2
 8000458:	717b      	strb	r3, [r7, #5]
	dds->unmodifiedWavetable = wavetable;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	dds->unmodifiedWavetableSize = wavetableSize;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	88fa      	ldrh	r2, [r7, #6]
 8000466:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	dds->waveType = waveType;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	797a      	ldrb	r2, [r7, #5]
 800046e:	721a      	strb	r2, [r3, #8]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
	...

0800047c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_DMA_Init+0x38>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <MX_DMA_Init+0x38>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_DMA_Init+0x38>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	200c      	movs	r0, #12
 80004a0:	f001 fda7 	bl	8001ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004a4:	200c      	movs	r0, #12
 80004a6:	f001 fdc0 	bl	800202a <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a2c      	ldr	r2, [pc, #176]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a26      	ldr	r2, [pc, #152]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a20      	ldr	r2, [pc, #128]	; (8000584 <MX_GPIO_Init+0xcc>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC0_Pin|DAC1_Pin|DAC2_Pin|DAC3_Pin
 8000514:	2200      	movs	r2, #0
 8000516:	21ff      	movs	r1, #255	; 0xff
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <MX_GPIO_Init+0xd0>)
 800051a:	f002 f946 	bl	80027aa <HAL_GPIO_WritePin>
                          |DAC4_Pin|DAC5_Pin|DAC6_Pin|DAC7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2103      	movs	r1, #3
 8000522:	481a      	ldr	r0, [pc, #104]	; (800058c <MX_GPIO_Init+0xd4>)
 8000524:	f002 f941 	bl	80027aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DAC0_Pin|DAC1_Pin|DAC2_Pin|DAC3_Pin
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	613b      	str	r3, [r7, #16]
                          |DAC4_Pin|DAC5_Pin|DAC6_Pin|DAC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4812      	ldr	r0, [pc, #72]	; (8000588 <MX_GPIO_Init+0xd0>)
 8000540:	f001 ff98 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000544:	2303      	movs	r3, #3
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <MX_GPIO_Init+0xd4>)
 800055c:	f001 ff8a 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <MX_GPIO_Init+0xd0>)
 8000576:	f001 ff7d 	bl	8002474 <HAL_GPIO_Init>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00

08000590 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_I2C1_Init+0x50>)
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <MX_I2C1_Init+0x54>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_I2C1_Init+0x50>)
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x58>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005ce:	f002 f905 	bl	80027dc <HAL_I2C_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d8:	f000 f992 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000098 	.word	0x20000098
 80005e4:	40005400 	.word	0x40005400
 80005e8:	000186a0 	.word	0x000186a0

080005ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <HAL_I2C_MspInit+0x70>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d123      	bne.n	8000654 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_I2C_MspInit+0x74>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a13      	ldr	r2, [pc, #76]	; (8000660 <HAL_I2C_MspInit+0x74>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_I2C_MspInit+0x74>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000624:	23c0      	movs	r3, #192	; 0xc0
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000628:	2312      	movs	r3, #18
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <HAL_I2C_MspInit+0x78>)
 8000638:	f001 ff1c 	bl	8002474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_I2C_MspInit+0x74>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_I2C_MspInit+0x74>)
 8000642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_I2C_MspInit+0x74>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40005400 	.word	0x40005400
 8000660:	40021000 	.word	0x40021000
 8000664:	40010c00 	.word	0x40010c00

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	f5ad 6dac 	sub.w	sp, sp, #1376	; 0x560
 800066e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f001 fb86 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f894 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ff1e 	bl	80004b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800067c:	f7ff fefe 	bl	800047c <MX_DMA_Init>
  MX_TIM2_Init();
 8000680:	f001 f970 	bl	8001964 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000684:	f001 f916 	bl	80018b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000688:	f001 f9b8 	bl	80019fc <MX_TIM3_Init>
  MX_I2C1_Init();
 800068c:	f7ff ff80 	bl	8000590 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000690:	f001 fa02 	bl	8001a98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // initialize the dds generator
  DDS_Init(&dds, SINEWAVE_LUT, SINEWAVE_LUT_SIZE, SINE, 100, DDS_MAX_AMP, GPIOA, &htim2, &htim4);
 8000694:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <main+0x114>)
 800069a:	9304      	str	r3, [sp, #16]
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <main+0x118>)
 800069e:	9303      	str	r3, [sp, #12]
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <main+0x11c>)
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b4:	4934      	ldr	r1, [pc, #208]	; (8000788 <main+0x120>)
 80006b6:	f7ff fd49 	bl	800014c <DDS_Init>

  // initialize the display
  SSD1306_Init(&display, &hi2c1, &SSD1306_FONT6x8);
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <main+0x124>)
 80006c0:	4933      	ldr	r1, [pc, #204]	; (8000790 <main+0x128>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fc3c 	bl	8000f40 <SSD1306_Init>
  // start the timers for rotary encoder processing
  // and initialize required variables
  RotaryEncoder_Init(&encoder, 80, &htim1, &htim3, ENC_BTN_GPIO_Port, ENC_BTN_Pin);
 80006c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <main+0x11c>)
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <main+0x12c>)
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <main+0x130>)
 80006d6:	2150      	movs	r1, #80	; 0x50
 80006d8:	4830      	ldr	r0, [pc, #192]	; (800079c <main+0x134>)
 80006da:	f000 fc09 	bl	8000ef0 <RotaryEncoder_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80006de:	482d      	ldr	r0, [pc, #180]	; (8000794 <main+0x12c>)
 80006e0:	f003 f99c 	bl	8003a1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80006e4:	213c      	movs	r1, #60	; 0x3c
 80006e6:	482c      	ldr	r0, [pc, #176]	; (8000798 <main+0x130>)
 80006e8:	f003 fbe2 	bl	8003eb0 <HAL_TIM_Encoder_Start>

  // initialize the menu
  Menu_Init(&menu, &display, &encoder, &dds);
 80006ec:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80006f0:	f107 0118 	add.w	r1, r7, #24
 80006f4:	1d38      	adds	r0, r7, #4
 80006f6:	4a29      	ldr	r2, [pc, #164]	; (800079c <main+0x134>)
 80006f8:	f000 f907 	bl	800090a <Menu_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// check if button was pressed
	if(!HAL_GPIO_ReadPin(encoder.btnPort, encoder.btnPin)) {
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <main+0x134>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <main+0x134>)
 8000702:	8b12      	ldrh	r2, [r2, #24]
 8000704:	b292      	uxth	r2, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f837 	bl	800277c <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10f      	bne.n	8000734 <main+0xcc>
		// wait for user to release the button
		while(!HAL_GPIO_ReadPin(encoder.btnPort, encoder.btnPin));
 8000714:	bf00      	nop
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <main+0x134>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <main+0x134>)
 800071c:	8b12      	ldrh	r2, [r2, #24]
 800071e:	b292      	uxth	r2, r2
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f002 f82a 	bl	800277c <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0f3      	beq.n	8000716 <main+0xae>
		encoder.btnChange = 1;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <main+0x134>)
 8000730:	2201      	movs	r2, #1
 8000732:	725a      	strb	r2, [r3, #9]
	}
	Menu_Update(&menu);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f904 	bl	8000944 <Menu_Update>
	// reset the changes
	if(encoder.change && menu.change) {
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <main+0x134>)
 800073e:	7a1b      	ldrb	r3, [r3, #8]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d009      	beq.n	800075a <main+0xf2>
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	7c1b      	ldrb	r3, [r3, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d005      	beq.n	800075a <main+0xf2>
	  encoder.change = 0;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <main+0x134>)
 8000750:	2200      	movs	r2, #0
 8000752:	721a      	strb	r2, [r3, #8]
	  menu.change = 0;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	741a      	strb	r2, [r3, #16]
	}
	if(encoder.btnChange && menu.change) {
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0x134>)
 800075c:	7a5b      	ldrb	r3, [r3, #9]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0cb      	beq.n	80006fc <main+0x94>
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	7c1b      	ldrb	r3, [r3, #16]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0c7      	beq.n	80006fc <main+0x94>
	  encoder.btnChange = 0;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0x134>)
 800076e:	2200      	movs	r2, #0
 8000770:	725a      	strb	r2, [r3, #9]
	  menu.change = 0;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]
	if(!HAL_GPIO_ReadPin(encoder.btnPort, encoder.btnPin)) {
 8000778:	e7c0      	b.n	80006fc <main+0x94>
 800077a:	bf00      	nop
 800077c:	20000108 	.word	0x20000108
 8000780:	20000224 	.word	0x20000224
 8000784:	40010800 	.word	0x40010800
 8000788:	080054ec 	.word	0x080054ec
 800078c:	08005b2c 	.word	0x08005b2c
 8000790:	20000098 	.word	0x20000098
 8000794:	20000194 	.word	0x20000194
 8000798:	200001dc 	.word	0x200001dc
 800079c:	200000ec 	.word	0x200000ec

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f9f8 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fc51 	bl	8003090 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007f4:	f000 f884 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f002 febc 	bl	8003590 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800081e:	f000 f86f 	bl	8000900 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3740      	adds	r7, #64	; 0x40
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim == &htim3) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d156      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xbe>
    uint16_t Encoder_NewTimerValue = __HAL_TIM_GET_COUNTER(&htim1);
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	81fb      	strh	r3, [r7, #14]
    if(Encoder_NewTimerValue % 4 || encoder.change) return;
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	b29b      	uxth	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14b      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d146      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0xbc>
    if(Encoder_NewTimerValue >= 65400 && Encoder_NewTimerValue <= 65535 && encoder.previousTimerVal <= 50)
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	f64f 7277 	movw	r2, #65399	; 0xff77
 8000860:	4293      	cmp	r3, r2
 8000862:	d910      	bls.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000866:	885b      	ldrh	r3, [r3, #2]
 8000868:	b29b      	uxth	r3, r3
 800086a:	2b32      	cmp	r3, #50	; 0x32
 800086c:	d80b      	bhi.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x5a>
    	encoder.rotationSpeed = encoder.previousTimerVal - (int32_t)(65535 - Encoder_NewTimerValue);
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000870:	885b      	ldrh	r3, [r3, #2]
 8000872:	b29b      	uxth	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800087c:	33ff      	adds	r3, #255	; 0xff
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000882:	6053      	str	r3, [r2, #4]
 8000884:	e01d      	b.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x96>
    else if(encoder.previousTimerVal >= 65400 && encoder.previousTimerVal <= 65535 && Encoder_NewTimerValue <= 50)
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000888:	885b      	ldrh	r3, [r3, #2]
 800088a:	b29b      	uxth	r3, r3
 800088c:	f64f 7277 	movw	r2, #65399	; 0xff77
 8000890:	4293      	cmp	r3, r2
 8000892:	d90f      	bls.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000896:	885b      	ldrh	r3, [r3, #2]
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	2b32      	cmp	r3, #50	; 0x32
 800089c:	d80a      	bhi.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x88>
    	encoder.rotationSpeed = (int32_t)(65535 - encoder.previousTimerVal) - Encoder_NewTimerValue;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80008a8:	33ff      	adds	r3, #255	; 0xff
 80008aa:	89fa      	ldrh	r2, [r7, #14]
 80008ac:	1a9b      	subs	r3, r3, r2
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008b0:	6053      	str	r3, [r2, #4]
 80008b2:	e006      	b.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x96>
    else
    	encoder.rotationSpeed = (int32_t)Encoder_NewTimerValue - encoder.previousTimerVal;
 80008b4:	89fb      	ldrh	r3, [r7, #14]
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008b8:	8852      	ldrh	r2, [r2, #2]
 80008ba:	b292      	uxth	r2, r2
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008c0:	6053      	str	r3, [r2, #4]

    encoder.rotationSpeed = (encoder.rotationSpeed * 50000)/80;	// in revolutions per ms
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f240 2271 	movw	r2, #625	; 0x271
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008d0:	6053      	str	r3, [r2, #4]
    encoder.previousTimerVal = Encoder_NewTimerValue;
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	8053      	strh	r3, [r2, #2]

    if(encoder.rotationSpeed != 0) {
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d004      	beq.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xbe>
    	encoder.change = 1;	// indicate change in main loop
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	721a      	strb	r2, [r3, #8]
 80008e6:	e000      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xbe>
    if(Encoder_NewTimerValue % 4 || encoder.change) return;
 80008e8:	bf00      	nop
    }
  }
}
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000194 	.word	0x20000194
 80008f8:	200001dc 	.word	0x200001dc
 80008fc:	200000ec 	.word	0x200000ec

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>

0800090a <Menu_Init>:
 **************************/

/********************************
 * Initialize the menu structure
 ********************************/
void Menu_Init(Menu *menu, SSD1306 *display, const volatile RotaryEncoder *encoder, DDS *dds) {
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	603b      	str	r3, [r7, #0]
	menu->display = display;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	605a      	str	r2, [r3, #4]
	menu->encoder = encoder;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	609a      	str	r2, [r3, #8]
	menu->dds = dds;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	60da      	str	r2, [r3, #12]

	menu->prevState = MENU_ENTRY;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
	menu->pos = WAVETYPE;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2200      	movs	r2, #0
 8000934:	705a      	strb	r2, [r3, #1]

	Menu_UpdateDisplay(menu);
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f000 f9ae 	bl	8000c98 <Menu_UpdateDisplay>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <Menu_Update>:
/********************************
 * Update every instance affected
 * by menu change: the display
 * and dds parameters
 ********************************/
void Menu_Update(Menu *menu) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	// first determine the next menu state
	MenuState nextState = Menu_NextState(menu);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f815 	bl	800097c <Menu_NextState>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
	// update the dds parameters
	Menu_UpdateDDS(menu, nextState);
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f89c 	bl	8000a98 <Menu_UpdateDDS>
	// update the display
	if(menu->change) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7c1b      	ldrb	r3, [r3, #16]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <Menu_Update+0x2a>
		Menu_UpdateDisplay(menu);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f995 	bl	8000c98 <Menu_UpdateDisplay>
	}
	// set nextState as prevState
	menu->prevState = nextState;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7bfa      	ldrb	r2, [r7, #15]
 8000972:	701a      	strb	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Menu_NextState>:

/****************************
 * Determine the next menu
 * state
 ****************************/
MenuState Menu_NextState(Menu *menu) {
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	// stay in the previous state by default
	MenuState nextState = menu->prevState;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	73fb      	strb	r3, [r7, #15]
	// record if any change was made
	menu->change = menu->encoder->change || menu->encoder->btnChange;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	7a1b      	ldrb	r3, [r3, #8]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d105      	bne.n	80009a2 <Menu_NextState+0x26>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	7a5b      	ldrb	r3, [r3, #9]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <Menu_NextState+0x2a>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <Menu_NextState+0x2c>
 80009a6:	2300      	movs	r3, #0
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	741a      	strb	r2, [r3, #16]
	// determine the next state
	switch(menu->prevState) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b05      	cmp	r3, #5
 80009b4:	d061      	beq.n	8000a7a <Menu_NextState+0xfe>
 80009b6:	2b05      	cmp	r3, #5
 80009b8:	dc62      	bgt.n	8000a80 <Menu_NextState+0x104>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <Menu_NextState+0x4e>
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db5e      	blt.n	8000a80 <Menu_NextState+0x104>
 80009c2:	3b01      	subs	r3, #1
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d85b      	bhi.n	8000a80 <Menu_NextState+0x104>
 80009c8:	e04e      	b.n	8000a68 <Menu_NextState+0xec>
		case MENU_ENTRY:
			if(menu->encoder->change) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	7a1b      	ldrb	r3, [r3, #8]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d022      	beq.n	8000a1c <Menu_NextState+0xa0>
				menu->change = 1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	741a      	strb	r2, [r3, #16]
				if(menu->encoder->rotationSpeed < 0 && menu->pos > 0) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da0a      	bge.n	80009fc <Menu_NextState+0x80>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <Menu_NextState+0x80>
					menu->pos--;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	705a      	strb	r2, [r3, #1]
 80009fa:	e034      	b.n	8000a66 <Menu_NextState+0xea>
				}
				else if(menu->encoder->rotationSpeed > 0 && menu->pos < MAX_MENU_ENTRY) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	dd3e      	ble.n	8000a84 <Menu_NextState+0x108>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d83a      	bhi.n	8000a84 <Menu_NextState+0x108>
					menu->pos++;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	705a      	strb	r2, [r3, #1]
					break;
					default:
					break;
				}
			}
		break;
 8000a1a:	e033      	b.n	8000a84 <Menu_NextState+0x108>
			} else if(menu->encoder->btnChange) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	7a5b      	ldrb	r3, [r3, #9]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01b      	beq.n	8000a60 <Menu_NextState+0xe4>
				switch(menu->pos) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d819      	bhi.n	8000a64 <Menu_NextState+0xe8>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <Menu_NextState+0xbc>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a4f 	.word	0x08000a4f
 8000a40:	08000a55 	.word	0x08000a55
 8000a44:	08000a5b 	.word	0x08000a5b
						nextState = WAVETYPE_CHANGE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
					break;
 8000a4c:	e00b      	b.n	8000a66 <Menu_NextState+0xea>
						nextState = FREQUENCY_CHANGE;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	73fb      	strb	r3, [r7, #15]
					break;
 8000a52:	e008      	b.n	8000a66 <Menu_NextState+0xea>
						nextState = AMPLITUDE_CHANGE;
 8000a54:	2303      	movs	r3, #3
 8000a56:	73fb      	strb	r3, [r7, #15]
					break;
 8000a58:	e005      	b.n	8000a66 <Menu_NextState+0xea>
						nextState = STATE_CHANGE;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	73fb      	strb	r3, [r7, #15]
					break;
 8000a5e:	e002      	b.n	8000a66 <Menu_NextState+0xea>
			}
 8000a60:	bf00      	nop
 8000a62:	e00f      	b.n	8000a84 <Menu_NextState+0x108>
					break;
 8000a64:	bf00      	nop
		break;
 8000a66:	e00d      	b.n	8000a84 <Menu_NextState+0x108>
		case WAVETYPE_CHANGE:
		case FREQUENCY_CHANGE:
		case AMPLITUDE_CHANGE:
		case STATE_CHANGE:
			if(menu->encoder->btnChange) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	7a5b      	ldrb	r3, [r3, #9]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <Menu_NextState+0x10c>
				nextState = UPDATE_CHANGES;
 8000a74:	2305      	movs	r3, #5
 8000a76:	73fb      	strb	r3, [r7, #15]
			}
		break;
 8000a78:	e006      	b.n	8000a88 <Menu_NextState+0x10c>
		case UPDATE_CHANGES:
			nextState = MENU_ENTRY;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a7e:	e004      	b.n	8000a8a <Menu_NextState+0x10e>
		default:
		break;
 8000a80:	bf00      	nop
 8000a82:	e002      	b.n	8000a8a <Menu_NextState+0x10e>
		break;
 8000a84:	bf00      	nop
 8000a86:	e000      	b.n	8000a8a <Menu_NextState+0x10e>
		break;
 8000a88:	bf00      	nop
	}
	return nextState;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <Menu_UpdateDDS>:

/****************************
 * Update DDS parameters
 ****************************/
void Menu_UpdateDDS(Menu *menu, MenuState nextState) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	if(menu->change) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7c1b      	ldrb	r3, [r3, #16]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80e8 	beq.w	8000c7e <Menu_UpdateDDS+0x1e6>
		// first, check if rotary encoder changed
		if(menu->encoder->change) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	7a1b      	ldrb	r3, [r3, #8]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80d8 	beq.w	8000c6c <Menu_UpdateDDS+0x1d4>
			// next, check if waveform type should be changed
			if(	menu->prevState == WAVETYPE_CHANGE &&
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d139      	bne.n	8000b38 <Menu_UpdateDDS+0xa0>
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d136      	bne.n	8000b38 <Menu_UpdateDDS+0xa0>
				nextState == WAVETYPE_CHANGE) {
				switch(menu->dds->waveType) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	7a1b      	ldrb	r3, [r3, #8]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d82f      	bhi.n	8000b34 <Menu_UpdateDDS+0x9c>
 8000ad4:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <Menu_UpdateDDS+0x44>)
 8000ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ada:	bf00      	nop
 8000adc:	08000aed 	.word	0x08000aed
 8000ae0:	08000aff 	.word	0x08000aff
 8000ae4:	08000b11 	.word	0x08000b11
 8000ae8:	08000b23 	.word	0x08000b23
					case SINE:
						DDS_ChangeWaveform(menu->dds, SQUAREWAVE_LUT, SQUAREWAVE_LUT_SIZE, SQUARE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68d8      	ldr	r0, [r3, #12]
 8000af0:	2301      	movs	r3, #1
 8000af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af6:	4964      	ldr	r1, [pc, #400]	; (8000c88 <Menu_UpdateDDS+0x1f0>)
 8000af8:	f7ff fca4 	bl	8000444 <DDS_ChangeWaveform>
					break;
 8000afc:	e01b      	b.n	8000b36 <Menu_UpdateDDS+0x9e>
					case SQUARE:
						DDS_ChangeWaveform(menu->dds, TRIANGLEWAVE_LUT, TRIANGLEWAVE_LUT_SIZE, TRIANGLE);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68d8      	ldr	r0, [r3, #12]
 8000b02:	2302      	movs	r3, #2
 8000b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b08:	4960      	ldr	r1, [pc, #384]	; (8000c8c <Menu_UpdateDDS+0x1f4>)
 8000b0a:	f7ff fc9b 	bl	8000444 <DDS_ChangeWaveform>
					break;
 8000b0e:	e012      	b.n	8000b36 <Menu_UpdateDDS+0x9e>
					case TRIANGLE:
						DDS_ChangeWaveform(menu->dds, SAWTOOTHWAVE_LUT, SAWTOOTHWAVE_LUT_SIZE, SAWTOOTH);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68d8      	ldr	r0, [r3, #12]
 8000b14:	2303      	movs	r3, #3
 8000b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1a:	495d      	ldr	r1, [pc, #372]	; (8000c90 <Menu_UpdateDDS+0x1f8>)
 8000b1c:	f7ff fc92 	bl	8000444 <DDS_ChangeWaveform>
					break;
 8000b20:	e009      	b.n	8000b36 <Menu_UpdateDDS+0x9e>
					case SAWTOOTH:
						DDS_ChangeWaveform(menu->dds, SINEWAVE_LUT, SINEWAVE_LUT_SIZE, SINE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68d8      	ldr	r0, [r3, #12]
 8000b26:	2300      	movs	r3, #0
 8000b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2c:	4959      	ldr	r1, [pc, #356]	; (8000c94 <Menu_UpdateDDS+0x1fc>)
 8000b2e:	f7ff fc89 	bl	8000444 <DDS_ChangeWaveform>
					break;
 8000b32:	e000      	b.n	8000b36 <Menu_UpdateDDS+0x9e>
					default:
					break;
 8000b34:	bf00      	nop
				switch(menu->dds->waveType) {
 8000b36:	e0a2      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
				}
			}
			// check if frequency should be changed
			else if(menu->prevState == FREQUENCY_CHANGE &&
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d13a      	bne.n	8000bb6 <Menu_UpdateDDS+0x11e>
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d137      	bne.n	8000bb6 <Menu_UpdateDDS+0x11e>
					nextState == FREQUENCY_CHANGE) {
				uint32_t absSpeed = (menu->encoder->rotationSpeed > 0) ? menu->encoder->rotationSpeed : -menu->encoder->rotationSpeed;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd03      	ble.n	8000b58 <Menu_UpdateDDS+0xc0>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	e003      	b.n	8000b60 <Menu_UpdateDDS+0xc8>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	425b      	negs	r3, r3
 8000b60:	617b      	str	r3, [r7, #20]
				int8_t sign = (menu->encoder->rotationSpeed > 0) ? 1 : -1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dd01      	ble.n	8000b70 <Menu_UpdateDDS+0xd8>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e001      	b.n	8000b74 <Menu_UpdateDDS+0xdc>
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b74:	74fb      	strb	r3, [r7, #19]
				if(absSpeed <= 10000) {
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d80b      	bhi.n	8000b98 <Menu_UpdateDDS+0x100>
					DDS_ChangeFrequency(menu->dds, menu->dds->freq + sign*1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68d8      	ldr	r0, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4619      	mov	r1, r3
 8000b92:	f7ff fc1f 	bl	80003d4 <DDS_ChangeFrequency>
					nextState == FREQUENCY_CHANGE) {
 8000b96:	e072      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
				} else {
					DDS_ChangeFrequency(menu->dds, menu->dds->freq + sign*100);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68d8      	ldr	r0, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000ba6:	2164      	movs	r1, #100	; 0x64
 8000ba8:	fb01 f202 	mul.w	r2, r1, r2
 8000bac:	4413      	add	r3, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fc10 	bl	80003d4 <DDS_ChangeFrequency>
					nextState == FREQUENCY_CHANGE) {
 8000bb4:	e063      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
				}
			}
			// check if amplitude should be changed
			else if(menu->prevState == AMPLITUDE_CHANGE &&
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d13d      	bne.n	8000c3a <Menu_UpdateDDS+0x1a2>
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d13a      	bne.n	8000c3a <Menu_UpdateDDS+0x1a2>
							nextState == AMPLITUDE_CHANGE) {
				uint32_t absSpeed = (menu->encoder->rotationSpeed > 0) ? menu->encoder->rotationSpeed : -menu->encoder->rotationSpeed;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dd03      	ble.n	8000bd6 <Menu_UpdateDDS+0x13e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	e003      	b.n	8000bde <Menu_UpdateDDS+0x146>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	425b      	negs	r3, r3
 8000bde:	60fb      	str	r3, [r7, #12]
				int8_t sign = (menu->encoder->rotationSpeed > 0) ? 1 : -1;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	dd01      	ble.n	8000bee <Menu_UpdateDDS+0x156>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e001      	b.n	8000bf2 <Menu_UpdateDDS+0x15a>
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf2:	72fb      	strb	r3, [r7, #11]
				if(absSpeed <= 8000) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000bfa:	d80f      	bhi.n	8000c1c <Menu_UpdateDDS+0x184>
					DDS_ChangeAmplitude(menu->dds, menu->dds->amp + sign*10);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68d8      	ldr	r0, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	6859      	ldr	r1, [r3, #4]
 8000c06:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	440b      	add	r3, r1
 8000c14:	4619      	mov	r1, r3
 8000c16:	f7ff fbf5 	bl	8000404 <DDS_ChangeAmplitude>
							nextState == AMPLITUDE_CHANGE) {
 8000c1a:	e030      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
				} else {
					DDS_ChangeAmplitude(menu->dds, menu->dds->amp + sign*100);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68d8      	ldr	r0, [r3, #12]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000c2a:	2164      	movs	r1, #100	; 0x64
 8000c2c:	fb01 f202 	mul.w	r2, r1, r2
 8000c30:	4413      	add	r3, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fbe6 	bl	8000404 <DDS_ChangeAmplitude>
							nextState == AMPLITUDE_CHANGE) {
 8000c38:	e021      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
				}
			}
			// check if dds state should be changed
			else if(menu->prevState == STATE_CHANGE &&
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d11d      	bne.n	8000c7e <Menu_UpdateDDS+0x1e6>
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d11a      	bne.n	8000c7e <Menu_UpdateDDS+0x1e6>
							nextState == STATE_CHANGE) {
				if(menu->dds->running) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d005      	beq.n	8000c60 <Menu_UpdateDDS+0x1c8>
					DDS_Stop(menu->dds);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fae3 	bl	8000224 <DDS_Stop>
		// if UPDATE_CHANGES, update the dds
		else if(nextState == UPDATE_CHANGES) {
			DDS_Update(menu->dds);
		}
	}
}
 8000c5e:	e00e      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
					DDS_Start(menu->dds);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff faad 	bl	80001c4 <DDS_Start>
}
 8000c6a:	e008      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
		else if(nextState == UPDATE_CHANGES) {
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	d105      	bne.n	8000c7e <Menu_UpdateDDS+0x1e6>
			DDS_Update(menu->dds);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff faf4 	bl	8000264 <DDS_Update>
}
 8000c7c:	e7ff      	b.n	8000c7e <Menu_UpdateDDS+0x1e6>
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	080055ec 	.word	0x080055ec
 8000c8c:	080057ec 	.word	0x080057ec
 8000c90:	080056ec 	.word	0x080056ec
 8000c94:	080054ec 	.word	0x080054ec

08000c98 <Menu_UpdateDisplay>:

/**********************
 * Update the display
 **********************/
void Menu_UpdateDisplay(Menu *menu) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	6078      	str	r0, [r7, #4]
	char buf[25];
	// clear the display
	SSD1306_ClearBuffer(menu->display);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fb89 	bl	80013bc <SSD1306_ClearBuffer>

	SSD1306_SetCursor(menu->display, 0, 0);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fb65 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, "DDS WaveGen v1.0");
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	497e      	ldr	r1, [pc, #504]	; (8000eb8 <Menu_UpdateDisplay+0x220>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc66 	bl	8001590 <SSD1306_WriteString>
	SSD1306_FillRegion(menu->display, 0, 8, SSD1306_SCREEN_WIDTH, 8, 1);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6858      	ldr	r0, [r3, #4]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2308      	movs	r3, #8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f000 fc72 	bl	80015be <SSD1306_FillRegion>
	SSD1306_SetCursor(menu->display, 0, 16);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2210      	movs	r2, #16
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fb4d 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, "Waveform: "); 	// on x=60 write waveform type
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4973      	ldr	r1, [pc, #460]	; (8000ebc <Menu_UpdateDisplay+0x224>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fc4e 	bl	8001590 <SSD1306_WriteString>
	SSD1306_SetCursor(menu->display, 0, 24);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2218      	movs	r2, #24
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb40 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, "Frequency: ");	// on x=66 write waveform frequency
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	496e      	ldr	r1, [pc, #440]	; (8000ec0 <Menu_UpdateDisplay+0x228>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fc41 	bl	8001590 <SSD1306_WriteString>
	SSD1306_SetCursor(menu->display, 0, 32);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2220      	movs	r2, #32
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fb33 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, "Amplitude: "); 	// on x=66 write waveform amplitude
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4968      	ldr	r1, [pc, #416]	; (8000ec4 <Menu_UpdateDisplay+0x22c>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fc34 	bl	8001590 <SSD1306_WriteString>
	SSD1306_SetCursor(menu->display, 0, 50);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2232      	movs	r2, #50	; 0x32
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fb26 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, "State: "); 		// on x=42 write current state (idle/running)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4963      	ldr	r1, [pc, #396]	; (8000ec8 <Menu_UpdateDisplay+0x230>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fc27 	bl	8001590 <SSD1306_WriteString>

	switch(menu->dds->waveType) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	7a1b      	ldrb	r3, [r3, #8]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d827      	bhi.n	8000d9c <Menu_UpdateDisplay+0x104>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <Menu_UpdateDisplay+0xbc>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d73 	.word	0x08000d73
 8000d5c:	08000d81 	.word	0x08000d81
 8000d60:	08000d8f 	.word	0x08000d8f
		case SINE:
			sprintf(buf, "Sine     ");
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4958      	ldr	r1, [pc, #352]	; (8000ecc <Menu_UpdateDisplay+0x234>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 ff22 	bl	8004bb4 <siprintf>
		break;
 8000d70:	e01b      	b.n	8000daa <Menu_UpdateDisplay+0x112>
		case SQUARE:
			sprintf(buf, "Square   ");
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4956      	ldr	r1, [pc, #344]	; (8000ed0 <Menu_UpdateDisplay+0x238>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 ff1b 	bl	8004bb4 <siprintf>
		break;
 8000d7e:	e014      	b.n	8000daa <Menu_UpdateDisplay+0x112>
		case TRIANGLE:
			sprintf(buf, "Triangle ");
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4953      	ldr	r1, [pc, #332]	; (8000ed4 <Menu_UpdateDisplay+0x23c>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 ff14 	bl	8004bb4 <siprintf>
		break;
 8000d8c:	e00d      	b.n	8000daa <Menu_UpdateDisplay+0x112>
		case SAWTOOTH:
			sprintf(buf, "Sawtooth ");
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4951      	ldr	r1, [pc, #324]	; (8000ed8 <Menu_UpdateDisplay+0x240>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 ff0d 	bl	8004bb4 <siprintf>
		break;
 8000d9a:	e006      	b.n	8000daa <Menu_UpdateDisplay+0x112>
		default:
			sprintf(buf, "Arbitrary");
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	494e      	ldr	r1, [pc, #312]	; (8000edc <Menu_UpdateDisplay+0x244>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 ff06 	bl	8004bb4 <siprintf>
		break;
 8000da8:	bf00      	nop
	}
	SSD1306_SetCursor(menu->display, 60, 16);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2210      	movs	r2, #16
 8000db0:	213c      	movs	r1, #60	; 0x3c
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fae5 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, buf);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fbe4 	bl	8001590 <SSD1306_WriteString>
	SSD1306_SetCursor(menu->display, 66, 24);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2218      	movs	r2, #24
 8000dce:	2142      	movs	r1, #66	; 0x42
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fad6 	bl	8001382 <SSD1306_SetCursor>
	sprintf(buf, "%6u Hz", (unsigned int)menu->dds->freq);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	493f      	ldr	r1, [pc, #252]	; (8000ee0 <Menu_UpdateDisplay+0x248>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fee6 	bl	8004bb4 <siprintf>
	SSD1306_WriteString(menu->display, buf);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f107 020c 	add.w	r2, r7, #12
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fbcc 	bl	8001590 <SSD1306_WriteString>
	SSD1306_SetCursor(menu->display, 66, 32);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	2142      	movs	r1, #66	; 0x42
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fabe 	bl	8001382 <SSD1306_SetCursor>
	sprintf(buf, "%4u mV", (unsigned int)menu->dds->amp);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4934      	ldr	r1, [pc, #208]	; (8000ee4 <Menu_UpdateDisplay+0x24c>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fece 	bl	8004bb4 <siprintf>
	SSD1306_WriteString(menu->display, buf);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f107 020c 	add.w	r2, r7, #12
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fbb4 	bl	8001590 <SSD1306_WriteString>
	if(menu->dds->running) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <Menu_UpdateDisplay+0x1aa>
		sprintf(buf, "Running");
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	492b      	ldr	r1, [pc, #172]	; (8000ee8 <Menu_UpdateDisplay+0x250>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 feba 	bl	8004bb4 <siprintf>
 8000e40:	e005      	b.n	8000e4e <Menu_UpdateDisplay+0x1b6>
	} else {
		sprintf(buf, "Idle");
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4929      	ldr	r1, [pc, #164]	; (8000eec <Menu_UpdateDisplay+0x254>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 feb3 	bl	8004bb4 <siprintf>
	}
	SSD1306_SetCursor(menu->display, 42, 50);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2232      	movs	r2, #50	; 0x32
 8000e54:	212a      	movs	r1, #42	; 0x2a
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fa93 	bl	8001382 <SSD1306_SetCursor>
	SSD1306_WriteString(menu->display, buf);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f107 020c 	add.w	r2, r7, #12
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fb92 	bl	8001590 <SSD1306_WriteString>

	// highlight the selection,
	if(menu->pos == MAX_MENU_ENTRY) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d109      	bne.n	8000e88 <Menu_UpdateDisplay+0x1f0>
		SSD1306_InvertRegion(menu->display, 0, 50, SSD1306_SCREEN_WIDTH, 8);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6858      	ldr	r0, [r3, #4]
 8000e78:	2308      	movs	r3, #8
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	2232      	movs	r2, #50	; 0x32
 8000e80:	2100      	movs	r1, #0
 8000e82:	f000 fbdd 	bl	8001640 <SSD1306_InvertRegion>
 8000e86:	e00d      	b.n	8000ea4 <Menu_UpdateDisplay+0x20c>
	} else {
		SSD1306_InvertRegion(menu->display, 0, 16 + 8*menu->pos, SSD1306_SCREEN_WIDTH, 8);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6858      	ldr	r0, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	3302      	adds	r3, #2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	2308      	movs	r3, #8
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f000 fbce 	bl	8001640 <SSD1306_InvertRegion>
	}
	SSD1306_UpdateScreen(menu->display);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fa2c 	bl	8001306 <SSD1306_UpdateScreen>
}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08005440 	.word	0x08005440
 8000ebc:	08005454 	.word	0x08005454
 8000ec0:	08005460 	.word	0x08005460
 8000ec4:	0800546c 	.word	0x0800546c
 8000ec8:	08005478 	.word	0x08005478
 8000ecc:	08005480 	.word	0x08005480
 8000ed0:	0800548c 	.word	0x0800548c
 8000ed4:	08005498 	.word	0x08005498
 8000ed8:	080054a4 	.word	0x080054a4
 8000edc:	080054b0 	.word	0x080054b0
 8000ee0:	080054bc 	.word	0x080054bc
 8000ee4:	080054c4 	.word	0x080054c4
 8000ee8:	080054cc 	.word	0x080054cc
 8000eec:	080054d4 	.word	0x080054d4

08000ef0 <RotaryEncoder_Init>:
 * Initialize the rotary encoder
 * structure
 ********************************/
void RotaryEncoder_Init(volatile RotaryEncoder *enc, uint8_t ppr,
						TIM_HandleTypeDef *htimEncoder, TIM_HandleTypeDef *htimTimeBase,
						GPIO_TypeDef *btnPort, uint16_t btnPin) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	460b      	mov	r3, r1
 8000efe:	72fb      	strb	r3, [r7, #11]
	enc->ppr = ppr;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	701a      	strb	r2, [r3, #0]
	enc->htimEncoder = htimEncoder;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	60da      	str	r2, [r3, #12]
	enc->htimTimeBase = htimTimeBase;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	611a      	str	r2, [r3, #16]
	enc->btnPort = btnPort;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	615a      	str	r2, [r3, #20]
	enc->btnPin = btnPin;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	8bba      	ldrh	r2, [r7, #28]
 8000f1c:	831a      	strh	r2, [r3, #24]

	enc->previousTimerVal = 0;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	805a      	strh	r2, [r3, #2]
	enc->rotationSpeed = 0;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]

	enc->change = 0;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	721a      	strb	r2, [r3, #8]
	enc->btnChange = 0;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	725a      	strb	r2, [r3, #9]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SSD1306_Init>:
 * Initialize SSD1306 and structure data
 *
 * Refer to p. 5 in the Application Note
 * for SSD1306
 ***********************************************/
HAL_StatusTypeDef SSD1306_Init(SSD1306* dev, I2C_HandleTypeDef *hi2c, const Font *font) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	dev->hi2c = hi2c;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	601a      	str	r2, [r3, #0]
	dev->curX = dev->curY = 0;	// set the cursor to the top left corner
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f893 2405 	ldrb.w	r2, [r3, #1029]	; 0x405
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	dev->font = font;			// font to use for text
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

	// clear the screen buffer
	for(uint16_t i = 0; i < SSD1306_SCREEN_BUFFER_SIZE; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	82fb      	strh	r3, [r7, #22]
 8000f72:	e007      	b.n	8000f84 <SSD1306_Init+0x44>
		dev->screenBuffer[i] = 0;
 8000f74:	8afb      	ldrh	r3, [r7, #22]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	711a      	strb	r2, [r3, #4]
	for(uint16_t i = 0; i < SSD1306_SCREEN_BUFFER_SIZE; i++) {
 8000f7e:	8afb      	ldrh	r3, [r7, #22]
 8000f80:	3301      	adds	r3, #1
 8000f82:	82fb      	strh	r3, [r7, #22]
 8000f84:	8afb      	ldrh	r3, [r7, #22]
 8000f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8a:	d3f3      	bcc.n	8000f74 <SSD1306_Init+0x34>
	}

	uint8_t errNum = 0;			// the number of error transactions
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;	// the status of each transaction

	// send commands for initialization
	// 1. Turn off the display
	status = SSD1306_WriteCommand(dev, SSD1306_DISPLAY_OFF);
 8000f90:	21ae      	movs	r1, #174	; 0xae
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 fbb0 	bl	80016f8 <SSD1306_WriteCommand>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf14      	ite	ne
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	2300      	moveq	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	4413      	add	r3, r2
 8000fae:	757b      	strb	r3, [r7, #21]
	// 2. Set MUX Ratio to 64
	status = SSD1306_WriteCommand(dev, SSD1306_SET_MUX_RATIO);
 8000fb0:	21a8      	movs	r1, #168	; 0xa8
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 fba0 	bl	80016f8 <SSD1306_WriteCommand>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8000fbc:	7d3b      	ldrb	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	7d7b      	ldrb	r3, [r7, #21]
 8000fcc:	4413      	add	r3, r2
 8000fce:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0x3F);	// mux ratio is n + 1, write 63 for mux ratio 64
 8000fd0:	213f      	movs	r1, #63	; 0x3f
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 fb90 	bl	80016f8 <SSD1306_WriteCommand>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8000fdc:	7d3b      	ldrb	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	4413      	add	r3, r2
 8000fee:	757b      	strb	r3, [r7, #21]
	// 3. Set page addressing mode
	status = SSD1306_WriteCommand(dev, SSD1306_SET_MEM_ADDR_MODE);
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 fb80 	bl	80016f8 <SSD1306_WriteCommand>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8000ffc:	7d3b      	ldrb	r3, [r7, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	7d7b      	ldrb	r3, [r7, #21]
 800100c:	4413      	add	r3, r2
 800100e:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, SSD1306_PAGE_ADDR_MODE);
 8001010:	2110      	movs	r1, #16
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 fb70 	bl	80016f8 <SSD1306_WriteCommand>
 8001018:	4603      	mov	r3, r0
 800101a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800101c:	7d3b      	ldrb	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	7d7b      	ldrb	r3, [r7, #21]
 800102c:	4413      	add	r3, r2
 800102e:	757b      	strb	r3, [r7, #21]
	// 4. Set the column start address to zero
	// first, the four less significant bits
	status = SSD1306_WriteCommand(dev, SSD1306_SET_LOWER_COL_ADDR | 0x00);
 8001030:	2100      	movs	r1, #0
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 fb60 	bl	80016f8 <SSD1306_WriteCommand>
 8001038:	4603      	mov	r3, r0
 800103a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800103c:	7d3b      	ldrb	r3, [r7, #20]
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf14      	ite	ne
 8001042:	2301      	movne	r3, #1
 8001044:	2300      	moveq	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	7d7b      	ldrb	r3, [r7, #21]
 800104c:	4413      	add	r3, r2
 800104e:	757b      	strb	r3, [r7, #21]
	// then, the four more significant bits
	status = SSD1306_WriteCommand(dev, SSD1306_SET_HIGHER_COL_ADDR | 0x00);
 8001050:	2110      	movs	r1, #16
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 fb50 	bl	80016f8 <SSD1306_WriteCommand>
 8001058:	4603      	mov	r3, r0
 800105a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800105c:	7d3b      	ldrb	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	bf14      	ite	ne
 8001062:	2301      	movne	r3, #1
 8001064:	2300      	moveq	r3, #0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	4413      	add	r3, r2
 800106e:	757b      	strb	r3, [r7, #21]
	// 5. Set GDDRAM page start address
	status = SSD1306_WriteCommand(dev, SSD1306_SET_PAGE_START_ADDR | 0x00);
 8001070:	21b0      	movs	r1, #176	; 0xb0
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 fb40 	bl	80016f8 <SSD1306_WriteCommand>
 8001078:	4603      	mov	r3, r0
 800107a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	7d7b      	ldrb	r3, [r7, #21]
 800108c:	4413      	add	r3, r2
 800108e:	757b      	strb	r3, [r7, #21]
	// 6. Set display offset to 0
	status = SSD1306_WriteCommand(dev, SSD1306_SET_DISPLAY_OFFSET);
 8001090:	21d3      	movs	r1, #211	; 0xd3
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 fb30 	bl	80016f8 <SSD1306_WriteCommand>
 8001098:	4603      	mov	r3, r0
 800109a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800109c:	7d3b      	ldrb	r3, [r7, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf14      	ite	ne
 80010a2:	2301      	movne	r3, #1
 80010a4:	2300      	moveq	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	7d7b      	ldrb	r3, [r7, #21]
 80010ac:	4413      	add	r3, r2
 80010ae:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0x00);
 80010b0:	2100      	movs	r1, #0
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 fb20 	bl	80016f8 <SSD1306_WriteCommand>
 80010b8:	4603      	mov	r3, r0
 80010ba:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	7d7b      	ldrb	r3, [r7, #21]
 80010cc:	4413      	add	r3, r2
 80010ce:	757b      	strb	r3, [r7, #21]
	// 7. Set display start line to 0
	status = SSD1306_WriteCommand(dev, SSD1306_SET_DISPLAY_START_LINE | 0x00);
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 fb10 	bl	80016f8 <SSD1306_WriteCommand>
 80010d8:	4603      	mov	r3, r0
 80010da:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80010dc:	7d3b      	ldrb	r3, [r7, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	4413      	add	r3, r2
 80010ee:	757b      	strb	r3, [r7, #21]
	// 8. Segment re-map (should be changed if screen is horizontally mirrored)
	status = SSD1306_WriteCommand(dev, SSD1306_SET_SEGMENT_REMAP);
 80010f0:	21a1      	movs	r1, #161	; 0xa1
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fb00 	bl	80016f8 <SSD1306_WriteCommand>
 80010f8:	4603      	mov	r3, r0
 80010fa:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80010fc:	7d3b      	ldrb	r3, [r7, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	7d7b      	ldrb	r3, [r7, #21]
 800110c:	4413      	add	r3, r2
 800110e:	757b      	strb	r3, [r7, #21]
	// 9. COM output scan direction (should be changed if screen is vertically mirrored)
	status = SSD1306_WriteCommand(dev, SSD1306_SET_COM_REMAP);
 8001110:	21c8      	movs	r1, #200	; 0xc8
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 faf0 	bl	80016f8 <SSD1306_WriteCommand>
 8001118:	4603      	mov	r3, r0
 800111a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800111c:	7d3b      	ldrb	r3, [r7, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf14      	ite	ne
 8001122:	2301      	movne	r3, #1
 8001124:	2300      	moveq	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	7d7b      	ldrb	r3, [r7, #21]
 800112c:	4413      	add	r3, r2
 800112e:	757b      	strb	r3, [r7, #21]
	// 10. Set COM pins hardware configuration (p. 40, table 10-3 in datasheet)
	// Alternative COM pin configuration and Disable COM Left/Right re-map
	status = SSD1306_WriteCommand(dev, SSD1306_SET_COM_PINS_HW_CONFIG);
 8001130:	21da      	movs	r1, #218	; 0xda
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 fae0 	bl	80016f8 <SSD1306_WriteCommand>
 8001138:	4603      	mov	r3, r0
 800113a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800113c:	7d3b      	ldrb	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	7d7b      	ldrb	r3, [r7, #21]
 800114c:	4413      	add	r3, r2
 800114e:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0x12);
 8001150:	2112      	movs	r1, #18
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fad0 	bl	80016f8 <SSD1306_WriteCommand>
 8001158:	4603      	mov	r3, r0
 800115a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800115c:	7d3b      	ldrb	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	7d7b      	ldrb	r3, [r7, #21]
 800116c:	4413      	add	r3, r2
 800116e:	757b      	strb	r3, [r7, #21]
	// 11. Set contrast control
	status = SSD1306_WriteCommand(dev, SSD1306_SET_CONTRAST);
 8001170:	2181      	movs	r1, #129	; 0x81
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 fac0 	bl	80016f8 <SSD1306_WriteCommand>
 8001178:	4603      	mov	r3, r0
 800117a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800117c:	7d3b      	ldrb	r3, [r7, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf14      	ite	ne
 8001182:	2301      	movne	r3, #1
 8001184:	2300      	moveq	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	7d7b      	ldrb	r3, [r7, #21]
 800118c:	4413      	add	r3, r2
 800118e:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0xFF);
 8001190:	21ff      	movs	r1, #255	; 0xff
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 fab0 	bl	80016f8 <SSD1306_WriteCommand>
 8001198:	4603      	mov	r3, r0
 800119a:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 800119c:	7d3b      	ldrb	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf14      	ite	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	2300      	moveq	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	7d7b      	ldrb	r3, [r7, #21]
 80011ac:	4413      	add	r3, r2
 80011ae:	757b      	strb	r3, [r7, #21]
	// 12. Disable entire display on (output follows RAM content)
	status = SSD1306_WriteCommand(dev, SSD1306_ENTIRE_DISPLAY_OFF);
 80011b0:	21a4      	movs	r1, #164	; 0xa4
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 faa0 	bl	80016f8 <SSD1306_WriteCommand>
 80011b8:	4603      	mov	r3, r0
 80011ba:	753b      	strb	r3, [r7, #20]
	// 13. Set normal display mode
	status = SSD1306_WriteCommand(dev, SSD1306_SET_NORMAL_DISPLAY);
 80011bc:	21a6      	movs	r1, #166	; 0xa6
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 fa9a 	bl	80016f8 <SSD1306_WriteCommand>
 80011c4:	4603      	mov	r3, r0
 80011c6:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80011c8:	7d3b      	ldrb	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	7d7b      	ldrb	r3, [r7, #21]
 80011d8:	4413      	add	r3, r2
 80011da:	757b      	strb	r3, [r7, #21]
	// 14. Set Osc Frequency
	status = SSD1306_WriteCommand(dev, SSD1306_SET_DISPLAY_CLOCK_DIVIDE);
 80011dc:	21d5      	movs	r1, #213	; 0xd5
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f000 fa8a 	bl	80016f8 <SSD1306_WriteCommand>
 80011e4:	4603      	mov	r3, r0
 80011e6:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80011e8:	7d3b      	ldrb	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	7d7b      	ldrb	r3, [r7, #21]
 80011f8:	4413      	add	r3, r2
 80011fa:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0xF0);
 80011fc:	21f0      	movs	r1, #240	; 0xf0
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fa7a 	bl	80016f8 <SSD1306_WriteCommand>
 8001204:	4603      	mov	r3, r0
 8001206:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	7d7b      	ldrb	r3, [r7, #21]
 8001218:	4413      	add	r3, r2
 800121a:	757b      	strb	r3, [r7, #21]
	// 15. Set pre-charge period
	status = SSD1306_WriteCommand(dev, SSD1306_SET_PRECHARGE_PERIOD);
 800121c:	21d9      	movs	r1, #217	; 0xd9
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 fa6a 	bl	80016f8 <SSD1306_WriteCommand>
 8001224:	4603      	mov	r3, r0
 8001226:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8001228:	7d3b      	ldrb	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	7d7b      	ldrb	r3, [r7, #21]
 8001238:	4413      	add	r3, r2
 800123a:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0x22);
 800123c:	2122      	movs	r1, #34	; 0x22
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fa5a 	bl	80016f8 <SSD1306_WriteCommand>
 8001244:	4603      	mov	r3, r0
 8001246:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8001248:	7d3b      	ldrb	r3, [r7, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	7d7b      	ldrb	r3, [r7, #21]
 8001258:	4413      	add	r3, r2
 800125a:	757b      	strb	r3, [r7, #21]
	// 16. Set Vcomh level to 0.77xVcc
	status = SSD1306_WriteCommand(dev, SSD1306_SET_VCOMH_DESELECT_LEVEL);
 800125c:	21db      	movs	r1, #219	; 0xdb
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 fa4a 	bl	80016f8 <SSD1306_WriteCommand>
 8001264:	4603      	mov	r3, r0
 8001266:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8001268:	7d3b      	ldrb	r3, [r7, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	7d7b      	ldrb	r3, [r7, #21]
 8001278:	4413      	add	r3, r2
 800127a:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, 0x20);
 800127c:	2120      	movs	r1, #32
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 fa3a 	bl	80016f8 <SSD1306_WriteCommand>
 8001284:	4603      	mov	r3, r0
 8001286:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 8001288:	7d3b      	ldrb	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	7d7b      	ldrb	r3, [r7, #21]
 8001298:	4413      	add	r3, r2
 800129a:	757b      	strb	r3, [r7, #21]
	// 17. Enable charge pump regulator
	status = SSD1306_WriteCommand(dev, SSD1306_CHARGE_PUMP_SETTING);
 800129c:	218d      	movs	r1, #141	; 0x8d
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fa2a 	bl	80016f8 <SSD1306_WriteCommand>
 80012a4:	4603      	mov	r3, r0
 80012a6:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80012a8:	7d3b      	ldrb	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	7d7b      	ldrb	r3, [r7, #21]
 80012b8:	4413      	add	r3, r2
 80012ba:	757b      	strb	r3, [r7, #21]
	status = SSD1306_WriteCommand(dev, SSD1306_CHARGE_PUMP_ENABLED);
 80012bc:	2114      	movs	r1, #20
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 fa1a 	bl	80016f8 <SSD1306_WriteCommand>
 80012c4:	4603      	mov	r3, r0
 80012c6:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80012c8:	7d3b      	ldrb	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	7d7b      	ldrb	r3, [r7, #21]
 80012d8:	4413      	add	r3, r2
 80012da:	757b      	strb	r3, [r7, #21]
	// 18. Turn on the display
	status = SSD1306_WriteCommand(dev, SSD1306_DISPLAY_ON);
 80012dc:	21af      	movs	r1, #175	; 0xaf
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fa0a 	bl	80016f8 <SSD1306_WriteCommand>
 80012e4:	4603      	mov	r3, r0
 80012e6:	753b      	strb	r3, [r7, #20]
	errNum += (status != HAL_OK);
 80012e8:	7d3b      	ldrb	r3, [r7, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
 80012f8:	4413      	add	r3, r2
 80012fa:	757b      	strb	r3, [r7, #21]

	return errNum;
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <SSD1306_UpdateScreen>:

/***********************************************
 * Update the screen with the buffer content
 ***********************************************/
uint8_t SSD1306_UpdateScreen(SSD1306 *dev) {
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	uint8_t errNum = 0;			// the number of error transactions
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;	// the status of each transaction

	// write the data for the RAM page by page
	for(uint8_t i = 0; i < SSD1306_NUMBER_PAGES; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	73bb      	strb	r3, [r7, #14]
 8001316:	e02c      	b.n	8001372 <SSD1306_UpdateScreen+0x6c>
		// set page start address
		status = SSD1306_WriteCommand(dev, SSD1306_SET_PAGE_START_ADDR | i);
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f9e8 	bl	80016f8 <SSD1306_WriteCommand>
 8001328:	4603      	mov	r3, r0
 800132a:	737b      	strb	r3, [r7, #13]
		errNum += (status != HAL_OK);
 800132c:	7b7b      	ldrb	r3, [r7, #13]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4413      	add	r3, r2
 800133e:	73fb      	strb	r3, [r7, #15]
		// write the page data
		status = SSD1306_WriteData(dev, dev->screenBuffer + i * SSD1306_SCREEN_WIDTH, SSD1306_SCREEN_WIDTH);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3304      	adds	r3, #4
 8001344:	7bba      	ldrb	r2, [r7, #14]
 8001346:	01d2      	lsls	r2, r2, #7
 8001348:	4413      	add	r3, r2
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	4619      	mov	r1, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f9eb 	bl	800172a <SSD1306_WriteData>
 8001354:	4603      	mov	r3, r0
 8001356:	737b      	strb	r3, [r7, #13]
		errNum += (status != HAL_OK);
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	4413      	add	r3, r2
 800136a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < SSD1306_NUMBER_PAGES; i++) {
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	3301      	adds	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	2b07      	cmp	r3, #7
 8001376:	d9cf      	bls.n	8001318 <SSD1306_UpdateScreen+0x12>
	}

	return errNum;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <SSD1306_SetCursor>:

/***********************************************
 * Set cursor for the display buffer
 ***********************************************/
void SSD1306_SetCursor(SSD1306 *dev, uint8_t x, uint8_t y) {
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
 800138e:	4613      	mov	r3, r2
 8001390:	70bb      	strb	r3, [r7, #2]
	if(x >= SSD1306_SCREEN_WIDTH || y >= SSD1306_SCREEN_HEIGHT) {
 8001392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <SSD1306_SetCursor+0x30>
 800139a:	78bb      	ldrb	r3, [r7, #2]
 800139c:	2b3f      	cmp	r3, #63	; 0x3f
 800139e:	d808      	bhi.n	80013b2 <SSD1306_SetCursor+0x30>
		return;
	}
	dev->curX = x;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	dev->curY = y;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	78ba      	ldrb	r2, [r7, #2]
 80013ac:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 80013b0:	e000      	b.n	80013b4 <SSD1306_SetCursor+0x32>
		return;
 80013b2:	bf00      	nop
}
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SSD1306_ClearBuffer>:

/***********************************************
 * Clear the display buffer
 ***********************************************/
void SSD1306_ClearBuffer(SSD1306 *dev) {
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SSD1306_SCREEN_BUFFER_SIZE; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	81fb      	strh	r3, [r7, #14]
 80013c8:	e007      	b.n	80013da <SSD1306_ClearBuffer+0x1e>
		dev->screenBuffer[i] = 0;
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	711a      	strb	r2, [r3, #4]
	for(uint16_t i = 0; i < SSD1306_SCREEN_BUFFER_SIZE; i++) {
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	3301      	adds	r3, #1
 80013d8:	81fb      	strh	r3, [r7, #14]
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d3f3      	bcc.n	80013ca <SSD1306_ClearBuffer+0xe>
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <SSD1306_SetPixelState>:

/***********************************************
 * Set pixel state in the buffer
 ***********************************************/
void SSD1306_SetPixelState(SSD1306 *dev, uint8_t x, uint8_t y, uint8_t state) {
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	4608      	mov	r0, r1
 80013f8:	4611      	mov	r1, r2
 80013fa:	461a      	mov	r2, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	70fb      	strb	r3, [r7, #3]
 8001400:	460b      	mov	r3, r1
 8001402:	70bb      	strb	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
	if(x >= SSD1306_SCREEN_WIDTH || y >= SSD1306_SCREEN_HEIGHT) {
 8001408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db43      	blt.n	8001498 <SSD1306_SetPixelState+0xaa>
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	2b3f      	cmp	r3, #63	; 0x3f
 8001414:	d840      	bhi.n	8001498 <SSD1306_SetPixelState+0xaa>
		return;
	}
	if(state == 0) {
 8001416:	787b      	ldrb	r3, [r7, #1]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11f      	bne.n	800145c <SSD1306_SetPixelState+0x6e>
		dev->screenBuffer[x + (y / 8) * SSD1306_SCREEN_WIDTH] &= ~(1 << (y % 8));
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	78bb      	ldrb	r3, [r7, #2]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	b2d8      	uxtb	r0, r3
 8001424:	4603      	mov	r3, r0
 8001426:	01db      	lsls	r3, r3, #7
 8001428:	4413      	add	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	791b      	ldrb	r3, [r3, #4]
 8001430:	b25a      	sxtb	r2, r3
 8001432:	78bb      	ldrb	r3, [r7, #2]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4013      	ands	r3, r2
 8001446:	b259      	sxtb	r1, r3
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	4603      	mov	r3, r0
 800144c:	01db      	lsls	r3, r3, #7
 800144e:	4413      	add	r3, r2
 8001450:	b2c9      	uxtb	r1, r1
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	460a      	mov	r2, r1
 8001458:	711a      	strb	r2, [r3, #4]
 800145a:	e01e      	b.n	800149a <SSD1306_SetPixelState+0xac>
	} else {
		dev->screenBuffer[x + (y / 8) * SSD1306_SCREEN_WIDTH] |= (1 << (y % 8));
 800145c:	78fa      	ldrb	r2, [r7, #3]
 800145e:	78bb      	ldrb	r3, [r7, #2]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	b2d8      	uxtb	r0, r3
 8001464:	4603      	mov	r3, r0
 8001466:	01db      	lsls	r3, r3, #7
 8001468:	4413      	add	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	b25a      	sxtb	r2, r3
 8001472:	78bb      	ldrb	r3, [r7, #2]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b259      	sxtb	r1, r3
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	4603      	mov	r3, r0
 8001488:	01db      	lsls	r3, r3, #7
 800148a:	4413      	add	r3, r2
 800148c:	b2c9      	uxtb	r1, r1
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	460a      	mov	r2, r1
 8001494:	711a      	strb	r2, [r3, #4]
 8001496:	e000      	b.n	800149a <SSD1306_SetPixelState+0xac>
		return;
 8001498:	bf00      	nop
	}
}
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <SSD1306_WriteChar>:
/******************************************
 * Write character in the buffer
 * Note: in this moment the function only
 * works for font size 6x8 pixels
 ******************************************/
void SSD1306_WriteChar(SSD1306 *dev, char c) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
	// check if there is enough space to print
	// the character; if not, do nothing
	if(dev->curX + dev->font->width >= SSD1306_SCREEN_WIDTH ||
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	dc61      	bgt.n	8001588 <SSD1306_WriteChar+0xe6>
	   dev->curY + dev->font->height >= SSD1306_SCREEN_HEIGHT) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 80014ca:	461a      	mov	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	4413      	add	r3, r2
	if(dev->curX + dev->font->width >= SSD1306_SCREEN_WIDTH ||
 80014d6:	2b3f      	cmp	r3, #63	; 0x3f
 80014d8:	dc56      	bgt.n	8001588 <SSD1306_WriteChar+0xe6>
		return;
	}
	// determine character starting index in fontset
	uint16_t ci = (c - 32) * (dev->font->width);
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	3b20      	subs	r3, #32
 80014de:	b29b      	uxth	r3, r3
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	b292      	uxth	r2, r2
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	81bb      	strh	r3, [r7, #12]
	uint8_t row, col, state;
	// draw the pixels
	for(col = 0; col < dev->font->width; col++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	73bb      	strb	r3, [r7, #14]
 80014f4:	e034      	b.n	8001560 <SSD1306_WriteChar+0xbe>
		for(row = 0; row < dev->font->height; row++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e027      	b.n	800154c <SSD1306_WriteChar+0xaa>
			state = ((dev->font->fontset[ci + col]) & (0x1 << row)) != 0;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	89b9      	ldrh	r1, [r7, #12]
 8001506:	7bba      	ldrb	r2, [r7, #14]
 8001508:	440a      	add	r2, r1
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	fa42 f303 	asr.w	r3, r2, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	72fb      	strb	r3, [r7, #11]
			SSD1306_SetPixelState(dev, dev->curX + col, dev->curY + row, state);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 2404 	ldrb.w	r2, [r3, #1028]	; 0x404
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	4413      	add	r3, r2
 8001530:	b2d9      	uxtb	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 2405 	ldrb.w	r2, [r3, #1029]	; 0x405
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	4413      	add	r3, r2
 800153c:	b2da      	uxtb	r2, r3
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff54 	bl	80013ee <SSD1306_SetPixelState>
		for(row = 0; row < dev->font->height; row++) {
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	429a      	cmp	r2, r3
 8001558:	d3d0      	bcc.n	80014fc <SSD1306_WriteChar+0x5a>
	for(col = 0; col < dev->font->width; col++) {
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	3301      	adds	r3, #1
 800155e:	73bb      	strb	r3, [r7, #14]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	7bba      	ldrb	r2, [r7, #14]
 800156a:	429a      	cmp	r2, r3
 800156c:	d3c3      	bcc.n	80014f6 <SSD1306_WriteChar+0x54>
		}
	}
	// update the cursor position
	dev->curX += dev->font->width;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 2404 	ldrb.w	r2, [r3, #1028]	; 0x404
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4413      	add	r3, r2
 800157e:	b2da      	uxtb	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8001586:	e000      	b.n	800158a <SSD1306_WriteChar+0xe8>
		return;
 8001588:	bf00      	nop
}
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <SSD1306_WriteString>:

/******************************************
 * Write string in the buffer
 ******************************************/
void SSD1306_WriteString(SSD1306 *dev, const char *str) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	while(*str != 0) {
 800159a:	e007      	b.n	80015ac <SSD1306_WriteString+0x1c>
		SSD1306_WriteChar(dev, *str++);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff7b 	bl	80014a2 <SSD1306_WriteChar>
	while(*str != 0) {
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f3      	bne.n	800159c <SSD1306_WriteString+0xc>
	}
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <SSD1306_FillRegion>:
 * Change the state of all pixels in
 * a rectangular region, with top left
 * corner located at (x, y), with the given
 * width and height
 *******************************************/
void SSD1306_FillRegion(SSD1306 *dev, uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t state) {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	4608      	mov	r0, r1
 80015c8:	4611      	mov	r1, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70bb      	strb	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
	// do nothing if region is out of screen bounds
	if(	x >= SSD1306_SCREEN_WIDTH || y >= SSD1306_SCREEN_HEIGHT ||
 80015d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db2b      	blt.n	8001638 <SSD1306_FillRegion+0x7a>
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	2b3f      	cmp	r3, #63	; 0x3f
 80015e4:	d828      	bhi.n	8001638 <SSD1306_FillRegion+0x7a>
		x + width > SSD1306_SCREEN_WIDTH || y + height > SSD1306_SCREEN_HEIGHT) {
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	4413      	add	r3, r2
	if(	x >= SSD1306_SCREEN_WIDTH || y >= SSD1306_SCREEN_HEIGHT ||
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	dc23      	bgt.n	8001638 <SSD1306_FillRegion+0x7a>
		x + width > SSD1306_SCREEN_WIDTH || y + height > SSD1306_SCREEN_HEIGHT) {
 80015f0:	78ba      	ldrb	r2, [r7, #2]
 80015f2:	7e3b      	ldrb	r3, [r7, #24]
 80015f4:	4413      	add	r3, r2
 80015f6:	2b40      	cmp	r3, #64	; 0x40
 80015f8:	dc1e      	bgt.n	8001638 <SSD1306_FillRegion+0x7a>
		return;
	}

	uint8_t row, col;
	for(col = x; col < x + width; col++) {
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	73bb      	strb	r3, [r7, #14]
 80015fe:	e014      	b.n	800162a <SSD1306_FillRegion+0x6c>
		for(row = y; row < y + height; row++) {
 8001600:	78bb      	ldrb	r3, [r7, #2]
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e008      	b.n	8001618 <SSD1306_FillRegion+0x5a>
			SSD1306_SetPixelState(dev, col, row, state);
 8001606:	7f3b      	ldrb	r3, [r7, #28]
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	7bb9      	ldrb	r1, [r7, #14]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff feee 	bl	80013ee <SSD1306_SetPixelState>
		for(row = y; row < y + height; row++) {
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	3301      	adds	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	78b9      	ldrb	r1, [r7, #2]
 800161c:	7e3b      	ldrb	r3, [r7, #24]
 800161e:	440b      	add	r3, r1
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <SSD1306_FillRegion+0x48>
	for(col = x; col < x + width; col++) {
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	3301      	adds	r3, #1
 8001628:	73bb      	strb	r3, [r7, #14]
 800162a:	7bba      	ldrb	r2, [r7, #14]
 800162c:	78f9      	ldrb	r1, [r7, #3]
 800162e:	787b      	ldrb	r3, [r7, #1]
 8001630:	440b      	add	r3, r1
 8001632:	429a      	cmp	r2, r3
 8001634:	dbe4      	blt.n	8001600 <SSD1306_FillRegion+0x42>
 8001636:	e000      	b.n	800163a <SSD1306_FillRegion+0x7c>
		return;
 8001638:	bf00      	nop
		}
	}
}
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <SSD1306_InvertRegion>:
 * Invert the state of all pixels in
 * a rectangular region, with top left
 * corner located at (x, y), with the given
 * width and height
 *******************************************/
void SSD1306_InvertRegion(SSD1306 *dev, uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	460b      	mov	r3, r1
 8001654:	70bb      	strb	r3, [r7, #2]
 8001656:	4613      	mov	r3, r2
 8001658:	707b      	strb	r3, [r7, #1]
	// do nothing if region is out of screen bounds
	if(	x >= SSD1306_SCREEN_WIDTH || y >= SSD1306_SCREEN_HEIGHT ||
 800165a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db46      	blt.n	80016f0 <SSD1306_InvertRegion+0xb0>
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	2b3f      	cmp	r3, #63	; 0x3f
 8001666:	d843      	bhi.n	80016f0 <SSD1306_InvertRegion+0xb0>
		x + width > SSD1306_SCREEN_WIDTH || y + height > SSD1306_SCREEN_HEIGHT) {
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	787b      	ldrb	r3, [r7, #1]
 800166c:	4413      	add	r3, r2
	if(	x >= SSD1306_SCREEN_WIDTH || y >= SSD1306_SCREEN_HEIGHT ||
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	dc3e      	bgt.n	80016f0 <SSD1306_InvertRegion+0xb0>
		x + width > SSD1306_SCREEN_WIDTH || y + height > SSD1306_SCREEN_HEIGHT) {
 8001672:	78ba      	ldrb	r2, [r7, #2]
 8001674:	7e3b      	ldrb	r3, [r7, #24]
 8001676:	4413      	add	r3, r2
 8001678:	2b40      	cmp	r3, #64	; 0x40
 800167a:	dc39      	bgt.n	80016f0 <SSD1306_InvertRegion+0xb0>
		return;
	}

	uint8_t row, col, state;
	for(col = x; col < x + width; col++) {
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	73bb      	strb	r3, [r7, #14]
 8001680:	e02f      	b.n	80016e2 <SSD1306_InvertRegion+0xa2>
		for(row = y; row < y + height; row++) {
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e023      	b.n	80016d0 <SSD1306_InvertRegion+0x90>
			// get the current state
			state = dev->screenBuffer[col + (row / 8) * SSD1306_SCREEN_WIDTH] & (1 << (row % 8));
 8001688:	7bba      	ldrb	r2, [r7, #14]
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	01db      	lsls	r3, r3, #7
 8001692:	4413      	add	r3, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	b25a      	sxtb	r2, r3
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	737b      	strb	r3, [r7, #13]
			// invert the state
			state = (state > 0) ? 0 : 1;
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf0c      	ite	eq
 80016b6:	2301      	moveq	r3, #1
 80016b8:	2300      	movne	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	737b      	strb	r3, [r7, #13]
			// set the new state
			SSD1306_SetPixelState(dev, col, row, state);
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	7bb9      	ldrb	r1, [r7, #14]
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fe92 	bl	80013ee <SSD1306_SetPixelState>
		for(row = y; row < y + height; row++) {
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	78b9      	ldrb	r1, [r7, #2]
 80016d4:	7e3b      	ldrb	r3, [r7, #24]
 80016d6:	440b      	add	r3, r1
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbd5      	blt.n	8001688 <SSD1306_InvertRegion+0x48>
	for(col = x; col < x + width; col++) {
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
 80016de:	3301      	adds	r3, #1
 80016e0:	73bb      	strb	r3, [r7, #14]
 80016e2:	7bba      	ldrb	r2, [r7, #14]
 80016e4:	78f9      	ldrb	r1, [r7, #3]
 80016e6:	787b      	ldrb	r3, [r7, #1]
 80016e8:	440b      	add	r3, r1
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbc9      	blt.n	8001682 <SSD1306_InvertRegion+0x42>
 80016ee:	e000      	b.n	80016f2 <SSD1306_InvertRegion+0xb2>
		return;
 80016f0:	bf00      	nop
		}
	}
}
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <SSD1306_WriteCommand>:
/************************************************
 * Write command to ssd1306
 * First, send control byte with c0 = 1
 * Then, send the command byte
 ************************************************/
HAL_StatusTypeDef SSD1306_WriteCommand(SSD1306 *dev, uint8_t cmd) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af04      	add	r7, sp, #16
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(dev->hi2c, SSD1306_I2C_ADDR, SSD1306_CONTROL_CMD_SINGLE, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2301      	movs	r3, #1
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	1cfb      	adds	r3, r7, #3
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	2210      	movs	r2, #16
 800171a:	2178      	movs	r1, #120	; 0x78
 800171c:	f001 f9a2 	bl	8002a64 <HAL_I2C_Mem_Write>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <SSD1306_WriteData>:
 * Write data to ssd1306
 * First, send control byte with c0 = 0 (don't
 * resend control bytes)
 * Then, send the stream of data bytes
 ************************************************/
HAL_StatusTypeDef SSD1306_WriteData(SSD1306 *dev, uint8_t *data, uint8_t size) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af04      	add	r7, sp, #16
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	4613      	mov	r3, r2
 8001736:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(dev->hi2c, SSD1306_I2C_ADDR, SSD1306_CONTROL_DATA_CONT, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	b29b      	uxth	r3, r3
 8001740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001744:	9202      	str	r2, [sp, #8]
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	2178      	movs	r1, #120	; 0x78
 8001752:	f001 f987 	bl	8002a64 <HAL_I2C_Mem_Write>
 8001756:	4603      	mov	r3, r0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_MspInit+0x5c>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_MspInit+0x5c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6193      	str	r3, [r2, #24]
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_MspInit+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_MspInit+0x5c>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_MspInit+0x5c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x5c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_MspInit+0x60>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_MspInit+0x60>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180a:	f000 faff 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA1_Channel2_IRQHandler+0x10>)
 800181a:	f000 fcf7 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000150 	.word	0x20000150

08001828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM3_IRQHandler+0x10>)
 800182e:	f002 fbcd 	bl	8003fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000194 	.word	0x20000194

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f003 f970 	bl	8004b50 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20005000 	.word	0x20005000
 800189c:	00000400 	.word	0x00000400
 80018a0:	2000008c 	.word	0x2000008c
 80018a4:	20000280 	.word	0x20000280

080018a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f96e 	bl	8004ba4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <MX_TIM1_Init+0xa8>)
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <MX_TIM1_Init+0xac>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_TIM1_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <MX_TIM1_Init+0xa8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_TIM1_Init+0xa8>)
 80018e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_TIM1_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM1_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_TIM1_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018fc:	2303      	movs	r3, #3
 80018fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_TIM1_Init+0xa8>)
 8001928:	f002 fa20 	bl	8003d6c <HAL_TIM_Encoder_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001932:	f7fe ffe5 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_TIM1_Init+0xa8>)
 8001944:	f003 f894 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800194e:	f7fe ffd7 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	; 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001dc 	.word	0x200001dc
 8001960:	40012c00 	.word	0x40012c00

08001964 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_TIM2_Init+0x94>)
 8001982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_TIM2_Init+0x94>)
 800198a:	2204      	movs	r2, #4
 800198c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM2_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_TIM2_Init+0x94>)
 8001996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_TIM2_Init+0x94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_TIM2_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a8:	4813      	ldr	r0, [pc, #76]	; (80019f8 <MX_TIM2_Init+0x94>)
 80019aa:	f001 ff77 	bl	800389c <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019b4:	f7fe ffa4 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM2_Init+0x94>)
 80019c6:	f002 fcc7 	bl	8004358 <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019d0:	f7fe ff96 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM2_Init+0x94>)
 80019e2:	f003 f845 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f7fe ff88 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000224 	.word	0x20000224

080019fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a20:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a2e:	2227      	movs	r2, #39	; 0x27
 8001a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3e:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a40:	f001 ff2c 	bl	800389c <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f7fe ff59 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a5c:	f002 fc7c 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f7fe ff4b 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a78:	f002 fffa 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a82:	f7fe ff3d 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000194 	.word	0x20000194
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001abc:	4a22      	ldr	r2, [pc, #136]	; (8001b48 <MX_TIM4_Init+0xb0>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800-1;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001ace:	f240 321f 	movw	r2, #799	; 0x31f
 8001ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ae0:	4818      	ldr	r0, [pc, #96]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001ae2:	f001 ffed 	bl	8003ac0 <HAL_TIM_PWM_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001aec:	f7fe ff08 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	4619      	mov	r1, r3
 8001afe:	4811      	ldr	r0, [pc, #68]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001b00:	f002 ffb6 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001b0a:	f7fe fef9 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0e:	2360      	movs	r3, #96	; 0x60
 8001b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400-1;
 8001b12:	f240 138f 	movw	r3, #399	; 0x18f
 8001b16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2208      	movs	r2, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001b28:	f002 fb58 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b32:	f7fe fee5 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM4_Init+0xac>)
 8001b38:	f000 f8c8 	bl	8001ccc <HAL_TIM_MspPostInit>

}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000108 	.word	0x20000108
 8001b48:	40000800 	.word	0x40000800

08001b4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d124      	bne.n	8001bb6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001bb2:	f000 fc5f 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d133      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_TIM_Base_MspInit+0xb4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_TIM_Base_MspInit+0xb4>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_TIM_Base_MspInit+0xb4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001bf8:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <HAL_TIM_Base_MspInit+0xbc>)
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001bfe:	2210      	movs	r2, #16
 8001c00:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c22:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001c26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001c28:	4816      	ldr	r0, [pc, #88]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c2a:	f000 fa19 	bl	8002060 <HAL_DMA_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001c34:	f7fe fe64 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c3c:	621a      	str	r2, [r3, #32]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_TIM_Base_MspInit+0xb8>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c44:	e018      	b.n	8001c78 <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_TIM_Base_MspInit+0xc0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d113      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_TIM_Base_MspInit+0xb4>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_TIM_Base_MspInit+0xb4>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	61d3      	str	r3, [r2, #28]
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_TIM_Base_MspInit+0xb4>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	201d      	movs	r0, #29
 8001c6e:	f000 f9c0 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c72:	201d      	movs	r0, #29
 8001c74:	f000 f9d9 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	20000150 	.word	0x20000150
 8001c88:	4002001c 	.word	0x4002001c
 8001c8c:	40000400 	.word	0x40000400

08001c90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_TIM_PWM_MspInit+0x34>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10b      	bne.n	8001cba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_PWM_MspInit+0x38>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40000800 	.word	0x40000800
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_TIM_MspPostInit+0x5c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d118      	bne.n	8001d1e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_TIM_MspPostInit+0x60>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_TIM_MspPostInit+0x60>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_TIM_MspPostInit+0x60>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_TIM_MspPostInit+0x64>)
 8001d1a:	f000 fbab 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010c00 	.word	0x40010c00

08001d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d5a:	f7ff fda5 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f002 fefd 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d62:	f7fe fc81 	bl	8000668 <main>
  bx lr
 8001d66:	4770      	bx	lr
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d70:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 8001d74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d78:	20000280 	.word	0x20000280

08001d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_2_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x28>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x28>)
 8001d8a:	f043 0310 	orr.w	r3, r3, #16
 8001d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f923 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	200f      	movs	r0, #15
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fce0 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40022000 	.word	0x40022000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f93b 	bl	8002046 <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de8:	f000 f903 	bl	8001ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_IncTick+0x1c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_IncTick+0x20>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <HAL_IncTick+0x20>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	2000026c 	.word	0x2000026c

08001e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_GetTick+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	2000026c 	.word	0x2000026c

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4906      	ldr	r1, [pc, #24]	; (8001edc <__NVIC_EnableIRQ+0x34>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fbc:	f7ff ff90 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff2d 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff42 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff90 	bl	8001f34 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5f 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff35 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa2 	bl	8001f98 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e043      	b.n	80020fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_DMA_Init+0xa8>)
 800207e:	4413      	add	r3, r2
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Init+0xac>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <HAL_DMA_Init+0xb0>)
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	bffdfff8 	.word	0xbffdfff8
 800210c:	cccccccd 	.word	0xcccccccd
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_DMA_Start+0x20>
 8002130:	2302      	movs	r3, #2
 8002132:	e02d      	b.n	8002190 <HAL_DMA_Start+0x7c>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11d      	bne.n	8002182 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f954 	bl	8002418 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e005      	b.n	800218e <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d008      	beq.n	80021c0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2204      	movs	r2, #4
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e020      	b.n	8002202 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 020e 	bic.w	r2, r2, #14
 80021ce:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d04f      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xc8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d04a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_DMA_IRQHandler+0x1f0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d029      	beq.n	80022ba <HAL_DMA_IRQHandler+0xae>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a65      	ldr	r2, [pc, #404]	; (8002400 <HAL_DMA_IRQHandler+0x1f4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d022      	beq.n	80022b6 <HAL_DMA_IRQHandler+0xaa>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a63      	ldr	r2, [pc, #396]	; (8002404 <HAL_DMA_IRQHandler+0x1f8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xa4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a62      	ldr	r2, [pc, #392]	; (8002408 <HAL_DMA_IRQHandler+0x1fc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d012      	beq.n	80022aa <HAL_DMA_IRQHandler+0x9e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a60      	ldr	r2, [pc, #384]	; (800240c <HAL_DMA_IRQHandler+0x200>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00a      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x98>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5f      	ldr	r2, [pc, #380]	; (8002410 <HAL_DMA_IRQHandler+0x204>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d102      	bne.n	800229e <HAL_DMA_IRQHandler+0x92>
 8002298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800229c:	e00e      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 800229e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022a2:	e00b      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022a8:	e008      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ae:	e005      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b4:	e002      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022b6:	2340      	movs	r3, #64	; 0x40
 80022b8:	e000      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a55      	ldr	r2, [pc, #340]	; (8002414 <HAL_DMA_IRQHandler+0x208>)
 80022be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8094 	beq.w	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022d2:	e08e      	b.n	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2202      	movs	r2, #2
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d056      	beq.n	8002392 <HAL_DMA_IRQHandler+0x186>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d051      	beq.n	8002392 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020a 	bic.w	r2, r2, #10
 800230a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a38      	ldr	r2, [pc, #224]	; (80023fc <HAL_DMA_IRQHandler+0x1f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d029      	beq.n	8002372 <HAL_DMA_IRQHandler+0x166>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a37      	ldr	r2, [pc, #220]	; (8002400 <HAL_DMA_IRQHandler+0x1f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_DMA_IRQHandler+0x162>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a35      	ldr	r2, [pc, #212]	; (8002404 <HAL_DMA_IRQHandler+0x1f8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_IRQHandler+0x15c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a34      	ldr	r2, [pc, #208]	; (8002408 <HAL_DMA_IRQHandler+0x1fc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d012      	beq.n	8002362 <HAL_DMA_IRQHandler+0x156>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_DMA_IRQHandler+0x200>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00a      	beq.n	800235c <HAL_DMA_IRQHandler+0x150>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <HAL_DMA_IRQHandler+0x204>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_DMA_IRQHandler+0x14a>
 8002350:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002354:	e00e      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235a:	e00b      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 800235c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002360:	e008      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002366:	e005      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236c:	e002      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 800236e:	2320      	movs	r3, #32
 8002370:	e000      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002372:	2302      	movs	r3, #2
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_DMA_IRQHandler+0x208>)
 8002376:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d034      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002390:	e02f      	b.n	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2208      	movs	r2, #8
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d028      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x1e8>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
    }
  }
  return;
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
}
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40020008 	.word	0x40020008
 8002400:	4002001c 	.word	0x4002001c
 8002404:	40020030 	.word	0x40020030
 8002408:	40020044 	.word	0x40020044
 800240c:	40020058 	.word	0x40020058
 8002410:	4002006c 	.word	0x4002006c
 8002414:	40020000 	.word	0x40020000

08002418 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d108      	bne.n	8002458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002456:	e007      	b.n	8002468 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b08b      	sub	sp, #44	; 0x2c
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e169      	b.n	800275c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002488:	2201      	movs	r2, #1
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8158 	bne.w	8002756 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a9a      	ldr	r2, [pc, #616]	; (8002714 <HAL_GPIO_Init+0x2a0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d05e      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024b0:	4a98      	ldr	r2, [pc, #608]	; (8002714 <HAL_GPIO_Init+0x2a0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d875      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024b6:	4a98      	ldr	r2, [pc, #608]	; (8002718 <HAL_GPIO_Init+0x2a4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d058      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024bc:	4a96      	ldr	r2, [pc, #600]	; (8002718 <HAL_GPIO_Init+0x2a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d86f      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024c2:	4a96      	ldr	r2, [pc, #600]	; (800271c <HAL_GPIO_Init+0x2a8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d052      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024c8:	4a94      	ldr	r2, [pc, #592]	; (800271c <HAL_GPIO_Init+0x2a8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d869      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024ce:	4a94      	ldr	r2, [pc, #592]	; (8002720 <HAL_GPIO_Init+0x2ac>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04c      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024d4:	4a92      	ldr	r2, [pc, #584]	; (8002720 <HAL_GPIO_Init+0x2ac>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d863      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024da:	4a92      	ldr	r2, [pc, #584]	; (8002724 <HAL_GPIO_Init+0x2b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d046      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024e0:	4a90      	ldr	r2, [pc, #576]	; (8002724 <HAL_GPIO_Init+0x2b0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d85d      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d82a      	bhi.n	8002540 <HAL_GPIO_Init+0xcc>
 80024ea:	2b12      	cmp	r3, #18
 80024ec:	d859      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <HAL_GPIO_Init+0x80>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	0800256f 	.word	0x0800256f
 80024f8:	08002549 	.word	0x08002549
 80024fc:	0800255b 	.word	0x0800255b
 8002500:	0800259d 	.word	0x0800259d
 8002504:	080025a3 	.word	0x080025a3
 8002508:	080025a3 	.word	0x080025a3
 800250c:	080025a3 	.word	0x080025a3
 8002510:	080025a3 	.word	0x080025a3
 8002514:	080025a3 	.word	0x080025a3
 8002518:	080025a3 	.word	0x080025a3
 800251c:	080025a3 	.word	0x080025a3
 8002520:	080025a3 	.word	0x080025a3
 8002524:	080025a3 	.word	0x080025a3
 8002528:	080025a3 	.word	0x080025a3
 800252c:	080025a3 	.word	0x080025a3
 8002530:	080025a3 	.word	0x080025a3
 8002534:	080025a3 	.word	0x080025a3
 8002538:	08002551 	.word	0x08002551
 800253c:	08002565 	.word	0x08002565
 8002540:	4a79      	ldr	r2, [pc, #484]	; (8002728 <HAL_GPIO_Init+0x2b4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002546:	e02c      	b.n	80025a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	623b      	str	r3, [r7, #32]
          break;
 800254e:	e029      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	3304      	adds	r3, #4
 8002556:	623b      	str	r3, [r7, #32]
          break;
 8002558:	e024      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	3308      	adds	r3, #8
 8002560:	623b      	str	r3, [r7, #32]
          break;
 8002562:	e01f      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	330c      	adds	r3, #12
 800256a:	623b      	str	r3, [r7, #32]
          break;
 800256c:	e01a      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002576:	2304      	movs	r3, #4
 8002578:	623b      	str	r3, [r7, #32]
          break;
 800257a:	e013      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002584:	2308      	movs	r3, #8
 8002586:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	611a      	str	r2, [r3, #16]
          break;
 800258e:	e009      	b.n	80025a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002590:	2308      	movs	r3, #8
 8002592:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	615a      	str	r2, [r3, #20]
          break;
 800259a:	e003      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
          break;
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          break;
 80025a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2bff      	cmp	r3, #255	; 0xff
 80025a8:	d801      	bhi.n	80025ae <HAL_GPIO_Init+0x13a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	e001      	b.n	80025b2 <HAL_GPIO_Init+0x13e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	d802      	bhi.n	80025c0 <HAL_GPIO_Init+0x14c>
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0x152>
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	3b08      	subs	r3, #8
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	210f      	movs	r1, #15
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	6a39      	ldr	r1, [r7, #32]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	431a      	orrs	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80b1 	beq.w	8002756 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f4:	4b4d      	ldr	r3, [pc, #308]	; (800272c <HAL_GPIO_Init+0x2b8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a4c      	ldr	r2, [pc, #304]	; (800272c <HAL_GPIO_Init+0x2b8>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_GPIO_Init+0x2b8>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x2bc>)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a40      	ldr	r2, [pc, #256]	; (8002734 <HAL_GPIO_Init+0x2c0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_GPIO_Init+0x1ec>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <HAL_GPIO_Init+0x2c4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00d      	beq.n	800265c <HAL_GPIO_Init+0x1e8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3e      	ldr	r2, [pc, #248]	; (800273c <HAL_GPIO_Init+0x2c8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x1e4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3d      	ldr	r2, [pc, #244]	; (8002740 <HAL_GPIO_Init+0x2cc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_GPIO_Init+0x1e0>
 8002650:	2303      	movs	r3, #3
 8002652:	e006      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 8002654:	2304      	movs	r3, #4
 8002656:	e004      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 8002658:	2302      	movs	r3, #2
 800265a:	e002      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 8002660:	2300      	movs	r3, #0
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	f002 0203 	and.w	r2, r2, #3
 8002668:	0092      	lsls	r2, r2, #2
 800266a:	4093      	lsls	r3, r2
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002672:	492f      	ldr	r1, [pc, #188]	; (8002730 <HAL_GPIO_Init+0x2bc>)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	492c      	ldr	r1, [pc, #176]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4928      	ldr	r1, [pc, #160]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4922      	ldr	r1, [pc, #136]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	491e      	ldr	r1, [pc, #120]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4918      	ldr	r1, [pc, #96]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4914      	ldr	r1, [pc, #80]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d021      	beq.n	8002748 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
 8002710:	e021      	b.n	8002756 <HAL_GPIO_Init+0x2e2>
 8002712:	bf00      	nop
 8002714:	10320000 	.word	0x10320000
 8002718:	10310000 	.word	0x10310000
 800271c:	10220000 	.word	0x10220000
 8002720:	10210000 	.word	0x10210000
 8002724:	10120000 	.word	0x10120000
 8002728:	10110000 	.word	0x10110000
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000
 8002734:	40010800 	.word	0x40010800
 8002738:	40010c00 	.word	0x40010c00
 800273c:	40011000 	.word	0x40011000
 8002740:	40011400 	.word	0x40011400
 8002744:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_GPIO_Init+0x304>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	43db      	mvns	r3, r3
 8002750:	4909      	ldr	r1, [pc, #36]	; (8002778 <HAL_GPIO_Init+0x304>)
 8002752:	4013      	ands	r3, r2
 8002754:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	3301      	adds	r3, #1
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f ae8e 	bne.w	8002488 <HAL_GPIO_Init+0x14>
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	372c      	adds	r7, #44	; 0x2c
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e001      	b.n	800279e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	807b      	strh	r3, [r7, #2]
 80027b6:	4613      	mov	r3, r2
 80027b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ba:	787b      	ldrb	r3, [r7, #1]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027c6:	e003      	b.n	80027d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	041a      	lsls	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	611a      	str	r2, [r3, #16]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e12b      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd fef2 	bl	80005ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800283e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002840:	f000 fffa 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a81      	ldr	r2, [pc, #516]	; (8002a50 <HAL_I2C_Init+0x274>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d807      	bhi.n	8002860 <HAL_I2C_Init+0x84>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_I2C_Init+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	bf94      	ite	ls
 8002858:	2301      	movls	r3, #1
 800285a:	2300      	movhi	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e006      	b.n	800286e <HAL_I2C_Init+0x92>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a7d      	ldr	r2, [pc, #500]	; (8002a58 <HAL_I2C_Init+0x27c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	bf94      	ite	ls
 8002868:	2301      	movls	r3, #1
 800286a:	2300      	movhi	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0e7      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a78      	ldr	r2, [pc, #480]	; (8002a5c <HAL_I2C_Init+0x280>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_I2C_Init+0x274>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d802      	bhi.n	80028b0 <HAL_I2C_Init+0xd4>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e009      	b.n	80028c4 <HAL_I2C_Init+0xe8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_I2C_Init+0x284>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	3301      	adds	r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	495c      	ldr	r1, [pc, #368]	; (8002a50 <HAL_I2C_Init+0x274>)
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d819      	bhi.n	8002918 <HAL_I2C_Init+0x13c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e59      	subs	r1, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028f8:	400b      	ands	r3, r1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_I2C_Init+0x138>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e59      	subs	r1, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fbb1 f3f3 	udiv	r3, r1, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	e051      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002914:	2304      	movs	r3, #4
 8002916:	e04f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_I2C_Init+0x168>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e012      	b.n	800296a <HAL_I2C_Init+0x18e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x196>
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <HAL_I2C_Init+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e58      	subs	r0, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	440b      	add	r3, r1
 8002988:	fbb0 f3f3 	udiv	r3, r0, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6911      	ldr	r1, [r2, #16]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	000186a0 	.word	0x000186a0
 8002a54:	001e847f 	.word	0x001e847f
 8002a58:	003d08ff 	.word	0x003d08ff
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	10624dd3 	.word	0x10624dd3

08002a64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	817b      	strh	r3, [r7, #10]
 8002a76:	460b      	mov	r3, r1
 8002a78:	813b      	strh	r3, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7e:	f7ff f9d7 	bl	8001e30 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	f040 80d9 	bne.w	8002c44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2319      	movs	r3, #25
 8002a98:	2201      	movs	r2, #1
 8002a9a:	496d      	ldr	r1, [pc, #436]	; (8002c50 <HAL_I2C_Mem_Write+0x1ec>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f971 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e0cc      	b.n	8002c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_Mem_Write+0x56>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0c5      	b.n	8002c46 <HAL_I2C_Mem_Write+0x1e2>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d007      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2221      	movs	r2, #33	; 0x21
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a4d      	ldr	r2, [pc, #308]	; (8002c54 <HAL_I2C_Mem_Write+0x1f0>)
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b22:	88f8      	ldrh	r0, [r7, #6]
 8002b24:	893a      	ldrh	r2, [r7, #8]
 8002b26:	8979      	ldrh	r1, [r7, #10]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4603      	mov	r3, r0
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f890 	bl	8002c58 <I2C_RequestMemoryWrite>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d052      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e081      	b.n	8002c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9f2 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d107      	bne.n	8002b6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06b      	b.n	8002c46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d11b      	bne.n	8002be4 <HAL_I2C_Mem_Write+0x180>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d017      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1aa      	bne.n	8002b42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f9de 	bl	8002fb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e016      	b.n	8002c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	00100002 	.word	0x00100002
 8002c54:	ffff0000 	.word	0xffff0000

08002c58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	817b      	strh	r3, [r7, #10]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	813b      	strh	r3, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f878 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca8:	d103      	bne.n	8002cb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e05f      	b.n	8002d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	492d      	ldr	r1, [pc, #180]	; (8002d80 <I2C_RequestMemoryWrite+0x128>)
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f8b0 	bl	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e04c      	b.n	8002d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f91a 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e02b      	b.n	8002d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e021      	b.n	8002d74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	6a39      	ldr	r1, [r7, #32]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8f4 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d107      	bne.n	8002d66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e005      	b.n	8002d76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00010002 	.word	0x00010002

08002d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	e025      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9c:	d021      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7ff f847 	bl	8001e30 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d116      	bne.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e023      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10d      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	e00c      	b.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d0b6      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e40:	e051      	b.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d123      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0204 	orr.w	r2, r3, #4
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e046      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea0:	d021      	beq.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fe ffc5 	bl	8001e30 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d116      	bne.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e020      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10c      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e00b      	b.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d18d      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	e02d      	b.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f878 	bl	8003034 <I2C_IsAcknowledgeFailed>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e02d      	b.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f54:	d021      	beq.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe ff6b 	bl	8001e30 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d116      	bne.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d1ca      	bne.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fbe:	e02d      	b.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f837 	bl	8003034 <I2C_IsAcknowledgeFailed>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e02d      	b.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd6:	d021      	beq.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7fe ff2a 	bl	8001e30 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e007      	b.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d1ca      	bne.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304a:	d11b      	bne.n	8003084 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003054:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0204 	orr.w	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e26c      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8087 	beq.w	80031be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b0:	4b92      	ldr	r3, [pc, #584]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d00c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030bc:	4b8f      	ldr	r3, [pc, #572]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d112      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
 80030c8:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d10b      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	4b89      	ldr	r3, [pc, #548]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d06c      	beq.n	80031bc <HAL_RCC_OscConfig+0x12c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d168      	bne.n	80031bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e246      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x76>
 80030f8:	4b80      	ldr	r3, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7f      	ldr	r2, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e02e      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x98>
 800310e:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b78      	ldr	r3, [pc, #480]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a77      	ldr	r2, [pc, #476]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0xbc>
 8003132:	4b72      	ldr	r3, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a71      	ldr	r2, [pc, #452]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6e      	ldr	r2, [pc, #440]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 800314c:	4b6b      	ldr	r3, [pc, #428]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6a      	ldr	r2, [pc, #424]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a67      	ldr	r2, [pc, #412]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fe60 	bl	8001e30 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fe5c 	bl	8001e30 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e1fa      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5d      	ldr	r3, [pc, #372]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xe4>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fe4c 	bl	8001e30 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fe48 	bl	8001e30 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1e6      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x10c>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1ba      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4939      	ldr	r1, [pc, #228]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fe01 	bl	8001e30 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fdfd 	bl	8001e30 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e19b      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4927      	ldr	r1, [pc, #156]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fde0 	bl	8001e30 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe fddc 	bl	8001e30 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e17a      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d03a      	beq.n	8003314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <HAL_RCC_OscConfig+0x274>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fdc0 	bl	8001e30 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fdbc 	bl	8001e30 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e15a      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f000 fac4 	bl	8003860 <RCC_Delay>
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RCC_OscConfig+0x274>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fda6 	bl	8001e30 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fda2 	bl	8001e30 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d908      	bls.n	8003308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e140      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	42420000 	.word	0x42420000
 8003304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b9e      	ldr	r3, [pc, #632]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e9      	bne.n	80032e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a6 	beq.w	800346e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b97      	ldr	r3, [pc, #604]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b94      	ldr	r3, [pc, #592]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a93      	ldr	r2, [pc, #588]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b91      	ldr	r3, [pc, #580]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b8e      	ldr	r3, [pc, #568]	; (8003588 <HAL_RCC_OscConfig+0x4f8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b8b      	ldr	r3, [pc, #556]	; (8003588 <HAL_RCC_OscConfig+0x4f8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a8a      	ldr	r2, [pc, #552]	; (8003588 <HAL_RCC_OscConfig+0x4f8>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe fd63 	bl	8001e30 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe fd5f 	bl	8001e30 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0fd      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b81      	ldr	r3, [pc, #516]	; (8003588 <HAL_RCC_OscConfig+0x4f8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x312>
 8003394:	4b7b      	ldr	r3, [pc, #492]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a7a      	ldr	r2, [pc, #488]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	e02d      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x334>
 80033aa:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a75      	ldr	r2, [pc, #468]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b73      	ldr	r3, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a72      	ldr	r2, [pc, #456]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	e01c      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x356>
 80033cc:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a6c      	ldr	r2, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a69      	ldr	r2, [pc, #420]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe fd13 	bl	8001e30 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fd0f 	bl	8001e30 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0ab      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCC_OscConfig+0x37e>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe fcfd 	bl	8001e30 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fcf9 	bl	8001e30 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e095      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b48      	ldr	r3, [pc, #288]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a47      	ldr	r2, [pc, #284]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8081 	beq.w	800357a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d061      	beq.n	8003548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d146      	bne.n	800351a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_RCC_OscConfig+0x4fc>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe fccd 	bl	8001e30 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe fcc9 	bl	8001e30 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e067      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	492d      	ldr	r1, [pc, #180]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a19      	ldr	r1, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	430b      	orrs	r3, r1
 80034e6:	4927      	ldr	r1, [pc, #156]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <HAL_RCC_OscConfig+0x4fc>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fc9d 	bl	8001e30 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fc99 	bl	8001e30 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e037      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x46a>
 8003518:	e02f      	b.n	800357a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_RCC_OscConfig+0x4fc>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fc86 	bl	8001e30 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fc82 	bl	8001e30 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e020      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x498>
 8003546:	e018      	b.n	800357a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e013      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	429a      	cmp	r2, r3
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
 800358c:	42420060 	.word	0x42420060

08003590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0d0      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d910      	bls.n	80035d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 0207 	bic.w	r2, r3, #7
 80035ba:	4965      	ldr	r1, [pc, #404]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0b8      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ec:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a58      	ldr	r2, [pc, #352]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a52      	ldr	r2, [pc, #328]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800360e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	494d      	ldr	r1, [pc, #308]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d040      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d115      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e07f      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e073      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06b      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4936      	ldr	r1, [pc, #216]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7fe fbd6 	bl	8001e30 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fe fbd2 	bl	8001e30 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e053      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 020c 	and.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1eb      	bne.n	8003688 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b27      	ldr	r3, [pc, #156]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d210      	bcs.n	80036e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4922      	ldr	r1, [pc, #136]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e032      	b.n	8003746 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4916      	ldr	r1, [pc, #88]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	490e      	ldr	r1, [pc, #56]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800371e:	f000 f821 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8003722:	4602      	mov	r2, r0
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	490a      	ldr	r1, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	5ccb      	ldrb	r3, [r1, r3]
 8003732:	fa22 f303 	lsr.w	r3, r2, r3
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1cc>)
 8003738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1d0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fb34 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40022000 	.word	0x40022000
 8003754:	40021000 	.word	0x40021000
 8003758:	08005b34 	.word	0x08005b34
 800375c:	20000000 	.word	0x20000000
 8003760:	20000004 	.word	0x20000004

08003764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003764:	b490      	push	{r4, r7}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_GetSysClockFreq+0xb0>)
 800376c:	1d3c      	adds	r4, r7, #4
 800376e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003774:	f240 2301 	movw	r3, #513	; 0x201
 8003778:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b04      	cmp	r3, #4
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x40>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x46>
 80037a2:	e02d      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a6:	623b      	str	r3, [r7, #32]
      break;
 80037a8:	e02d      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	0c9b      	lsrs	r3, r3, #18
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037b6:	4413      	add	r3, r2
 80037b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c5b      	lsrs	r3, r3, #17
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037d6:	4413      	add	r3, r2
 80037d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4a0e      	ldr	r2, [pc, #56]	; (800381c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e2:	fb02 f203 	mul.w	r2, r2, r3
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e004      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	623b      	str	r3, [r7, #32]
      break;
 80037fe:	e002      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003802:	623b      	str	r3, [r7, #32]
      break;
 8003804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003806:	6a3b      	ldr	r3, [r7, #32]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bc90      	pop	{r4, r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	080054dc 	.word	0x080054dc
 8003818:	40021000 	.word	0x40021000
 800381c:	007a1200 	.word	0x007a1200
 8003820:	003d0900 	.word	0x003d0900

08003824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003828:	4b02      	ldr	r3, [pc, #8]	; (8003834 <HAL_RCC_GetHCLKFreq+0x10>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	20000000 	.word	0x20000000

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800383c:	f7ff fff2 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	08005b44 	.word	0x08005b44

08003860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCC_Delay+0x34>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <RCC_Delay+0x38>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a5b      	lsrs	r3, r3, #9
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800387c:	bf00      	nop
  }
  while (Delay --);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	60fa      	str	r2, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <RCC_Delay+0x1c>
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	20000000 	.word	0x20000000
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e041      	b.n	8003932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe f982 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 fe24 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e032      	b.n	80039ba <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_TIM_Base_Start+0x88>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_TIM_Base_Start+0x48>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d009      	beq.n	8003984 <HAL_TIM_Base_Start+0x48>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_TIM_Base_Start+0x8c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_Base_Start+0x48>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <HAL_TIM_Base_Start+0x90>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d010      	beq.n	80039b8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e007      	b.n	80039b8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800

080039d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	f241 1311 	movw	r3, #4369	; 0x1111
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10f      	bne.n	8003a08 <HAL_TIM_Base_Stop+0x38>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	f240 4344 	movw	r3, #1092	; 0x444
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_Base_Stop+0x38>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e03a      	b.n	8003aaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x58>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d009      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x58>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x58>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_TIM_Base_Start_IT+0xa0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d111      	bne.n	8003a98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d010      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a96:	e007      	b.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800

08003ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e041      	b.n	8003b56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe f8d2 	bl	8001c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 fd12 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_TIM_PWM_Start+0x24>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e022      	b.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d109      	bne.n	8003b9e <HAL_TIM_PWM_Start+0x3e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e015      	b.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d109      	bne.n	8003bb8 <HAL_TIM_PWM_Start+0x58>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e008      	b.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e05e      	b.n	8003c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x82>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	e013      	b.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Start+0xa2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	e003      	b.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 ff08 	bl	8004a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_TIM_PWM_Start+0x138>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_TIM_PWM_Start+0x138>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_TIM_PWM_Start+0xfa>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d009      	beq.n	8003c5a <HAL_TIM_PWM_Start+0xfa>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <HAL_TIM_PWM_Start+0x13c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_TIM_PWM_Start+0xfa>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <HAL_TIM_PWM_Start+0x140>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d010      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7c:	e007      	b.n	8003c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800

08003ca4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 feb6 	bl	8004a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <HAL_TIM_PWM_Stop+0xc4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d117      	bne.n	8003cf6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_TIM_PWM_Stop+0x52>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	f240 4344 	movw	r3, #1092	; 0x444
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d107      	bne.n	8003cf6 <HAL_TIM_PWM_Stop+0x52>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_TIM_PWM_Stop+0x82>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_PWM_Stop+0x82>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Stop+0x92>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d34:	e013      	b.n	8003d5e <HAL_TIM_PWM_Stop+0xba>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Stop+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	e00b      	b.n	8003d5e <HAL_TIM_PWM_Stop+0xba>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Stop+0xb2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d54:	e003      	b.n	8003d5e <HAL_TIM_PWM_Stop+0xba>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40012c00 	.word	0x40012c00

08003d6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e093      	b.n	8003ea8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd fed9 	bl	8001b4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db0:	f023 0307 	bic.w	r3, r3, #7
 8003db4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fbb1 	bl	8004528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e0c:	f023 030c 	bic.w	r3, r3, #12
 8003e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	011a      	lsls	r2, r3, #4
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	031b      	lsls	r3, r3, #12
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4313      	orrs	r3, r2
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ec8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ed0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ed8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d110      	bne.n	8003f02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d102      	bne.n	8003eec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ee6:	7b7b      	ldrb	r3, [r7, #13]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d001      	beq.n	8003ef0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e069      	b.n	8003fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f00:	e031      	b.n	8003f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d110      	bne.n	8003f2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f08:	7bbb      	ldrb	r3, [r7, #14]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f0e:	7b3b      	ldrb	r3, [r7, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e055      	b.n	8003fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f28:	e01d      	b.n	8003f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f30:	7bbb      	ldrb	r3, [r7, #14]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	7b7b      	ldrb	r3, [r7, #13]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f3c:	7b3b      	ldrb	r3, [r7, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d001      	beq.n	8003f46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e03e      	b.n	8003fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_TIM_Encoder_Start+0xc4>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d008      	beq.n	8003f84 <HAL_TIM_Encoder_Start+0xd4>
 8003f72:	e00f      	b.n	8003f94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd53 	bl	8004a28 <TIM_CCxChannelCmd>
      break;
 8003f82:	e016      	b.n	8003fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fd4b 	bl	8004a28 <TIM_CCxChannelCmd>
      break;
 8003f92:	e00e      	b.n	8003fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fd43 	bl	8004a28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2104      	movs	r1, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd3c 	bl	8004a28 <TIM_CCxChannelCmd>
      break;
 8003fb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa6f 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa62 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa71 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0204 	mvn.w	r2, #4
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa45 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa38 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fa47 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0208 	mvn.w	r2, #8
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa1b 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa0e 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa1d 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d122      	bne.n	8004124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d11b      	bne.n	8004124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0210 	mvn.w	r2, #16
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2208      	movs	r2, #8
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9f1 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9e4 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f9f3 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0201 	mvn.w	r2, #1
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fb6e 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fce1 	bl	8004b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9b7 	bl	8004516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0220 	mvn.w	r2, #32
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fcac 	bl	8004b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e0ac      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x174>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	f200 809f 	bhi.w	8004344 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004241 	.word	0x08004241
 8004210:	08004345 	.word	0x08004345
 8004214:	08004345 	.word	0x08004345
 8004218:	08004345 	.word	0x08004345
 800421c:	08004281 	.word	0x08004281
 8004220:	08004345 	.word	0x08004345
 8004224:	08004345 	.word	0x08004345
 8004228:	08004345 	.word	0x08004345
 800422c:	080042c3 	.word	0x080042c3
 8004230:	08004345 	.word	0x08004345
 8004234:	08004345 	.word	0x08004345
 8004238:	08004345 	.word	0x08004345
 800423c:	08004303 	.word	0x08004303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f9d0 	bl	80045ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	619a      	str	r2, [r3, #24]
      break;
 800427e:	e062      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fa16 	bl	80046b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6999      	ldr	r1, [r3, #24]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	619a      	str	r2, [r3, #24]
      break;
 80042c0:	e041      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fa5f 	bl	800478c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0208 	orr.w	r2, r2, #8
 80042dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0204 	bic.w	r2, r2, #4
 80042ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	61da      	str	r2, [r3, #28]
      break;
 8004300:	e021      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 faa9 	bl	8004860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69d9      	ldr	r1, [r3, #28]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	021a      	lsls	r2, r3, #8
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	61da      	str	r2, [r3, #28]
      break;
 8004342:	e000      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e0b3      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x180>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a8:	d03e      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xd0>
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ae:	f200 8087 	bhi.w	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b6:	f000 8085 	beq.w	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	d87f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d01a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xa2>
 80043c4:	2b70      	cmp	r3, #112	; 0x70
 80043c6:	d87b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043c8:	2b60      	cmp	r3, #96	; 0x60
 80043ca:	d050      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x116>
 80043cc:	2b60      	cmp	r3, #96	; 0x60
 80043ce:	d877      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043d0:	2b50      	cmp	r3, #80	; 0x50
 80043d2:	d03c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xf6>
 80043d4:	2b50      	cmp	r3, #80	; 0x50
 80043d6:	d873      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d058      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x136>
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d86f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043e0:	2b30      	cmp	r3, #48	; 0x30
 80043e2:	d064      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x156>
 80043e4:	2b30      	cmp	r3, #48	; 0x30
 80043e6:	d86b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d060      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x156>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d867      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05c      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x156>
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d05a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043f8:	e062      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6899      	ldr	r1, [r3, #8]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f000 faee 	bl	80049ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800441c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
      break;
 8004426:	e04e      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f000 fad7 	bl	80049ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800444a:	609a      	str	r2, [r3, #8]
      break;
 800444c:	e03b      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	461a      	mov	r2, r3
 800445c:	f000 fa4e 	bl	80048fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2150      	movs	r1, #80	; 0x50
 8004466:	4618      	mov	r0, r3
 8004468:	f000 faa5 	bl	80049b6 <TIM_ITRx_SetConfig>
      break;
 800446c:	e02b      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	f000 fa6c 	bl	8004958 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2160      	movs	r1, #96	; 0x60
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fa95 	bl	80049b6 <TIM_ITRx_SetConfig>
      break;
 800448c:	e01b      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 fa2e 	bl	80048fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fa85 	bl	80049b6 <TIM_ITRx_SetConfig>
      break;
 80044ac:	e00b      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 fa7c 	bl	80049b6 <TIM_ITRx_SetConfig>
        break;
 80044be:	e002      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a29      	ldr	r2, [pc, #164]	; (80045e0 <TIM_Base_SetConfig+0xb8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x30>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x30>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <TIM_Base_SetConfig+0xbc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x30>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <TIM_Base_SetConfig+0xc0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <TIM_Base_SetConfig+0xb8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <TIM_Base_SetConfig+0xbc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <TIM_Base_SetConfig+0xc0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <TIM_Base_SetConfig+0xb8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d103      	bne.n	80045d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	615a      	str	r2, [r3, #20]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800

080045ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 0302 	bic.w	r3, r3, #2
 8004634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <TIM_OC1_SetConfig+0xc8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0308 	bic.w	r3, r3, #8
 800464e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0304 	bic.w	r3, r3, #4
 8004660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <TIM_OC1_SetConfig+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d111      	bne.n	800468e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40012c00 	.word	0x40012c00

080046b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0210 	bic.w	r2, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0320 	bic.w	r3, r3, #32
 8004702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <TIM_OC2_SetConfig+0xd0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10d      	bne.n	8004734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <TIM_OC2_SetConfig+0xd0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d113      	bne.n	8004764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800474a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00

0800478c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1d      	ldr	r2, [pc, #116]	; (800485c <TIM_OC3_SetConfig+0xd0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10d      	bne.n	8004806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <TIM_OC3_SetConfig+0xd0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d113      	bne.n	8004836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00

08004860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <TIM_OC4_SetConfig+0x98>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d109      	bne.n	80048d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	019b      	lsls	r3, r3, #6
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40012c00 	.word	0x40012c00

080048fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 030a 	bic.w	r3, r3, #10
 8004938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	621a      	str	r2, [r3, #32]
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f023 0210 	bic.w	r2, r3, #16
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004982:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	031b      	lsls	r3, r3, #12
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f043 0307 	orr.w	r3, r3, #7
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e046      	b.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d009      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10c      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800

08004b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	2600      	movs	r6, #0
 8004b60:	4d0c      	ldr	r5, [pc, #48]	; (8004b94 <__libc_init_array+0x38>)
 8004b62:	4c0d      	ldr	r4, [pc, #52]	; (8004b98 <__libc_init_array+0x3c>)
 8004b64:	1b64      	subs	r4, r4, r5
 8004b66:	10a4      	asrs	r4, r4, #2
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	f000 fc5c 	bl	8005428 <_init>
 8004b70:	2600      	movs	r6, #0
 8004b72:	4d0a      	ldr	r5, [pc, #40]	; (8004b9c <__libc_init_array+0x40>)
 8004b74:	4c0a      	ldr	r4, [pc, #40]	; (8004ba0 <__libc_init_array+0x44>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08005b80 	.word	0x08005b80
 8004b98:	08005b80 	.word	0x08005b80
 8004b9c:	08005b80 	.word	0x08005b80
 8004ba0:	08005b84 	.word	0x08005b84

08004ba4 <memset>:
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4402      	add	r2, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <siprintf>:
 8004bb4:	b40e      	push	{r1, r2, r3}
 8004bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bba:	b500      	push	{lr}
 8004bbc:	b09c      	sub	sp, #112	; 0x70
 8004bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc0:	9002      	str	r0, [sp, #8]
 8004bc2:	9006      	str	r0, [sp, #24]
 8004bc4:	9107      	str	r1, [sp, #28]
 8004bc6:	9104      	str	r1, [sp, #16]
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <siprintf+0x38>)
 8004bca:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <siprintf+0x3c>)
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	9105      	str	r1, [sp, #20]
 8004bd2:	6800      	ldr	r0, [r0, #0]
 8004bd4:	a902      	add	r1, sp, #8
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	f000 f868 	bl	8004cac <_svfiprintf_r>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	9b02      	ldr	r3, [sp, #8]
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	b01c      	add	sp, #112	; 0x70
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b003      	add	sp, #12
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	ffff0208 	.word	0xffff0208

08004bf4 <__ssputs_r>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	688e      	ldr	r6, [r1, #8]
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	429e      	cmp	r6, r3
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4690      	mov	r8, r2
 8004c02:	461f      	mov	r7, r3
 8004c04:	d838      	bhi.n	8004c78 <__ssputs_r+0x84>
 8004c06:	898a      	ldrh	r2, [r1, #12]
 8004c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c0c:	d032      	beq.n	8004c74 <__ssputs_r+0x80>
 8004c0e:	6825      	ldr	r5, [r4, #0]
 8004c10:	6909      	ldr	r1, [r1, #16]
 8004c12:	3301      	adds	r3, #1
 8004c14:	eba5 0901 	sub.w	r9, r5, r1
 8004c18:	6965      	ldr	r5, [r4, #20]
 8004c1a:	444b      	add	r3, r9
 8004c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c24:	106d      	asrs	r5, r5, #1
 8004c26:	429d      	cmp	r5, r3
 8004c28:	bf38      	it	cc
 8004c2a:	461d      	movcc	r5, r3
 8004c2c:	0553      	lsls	r3, r2, #21
 8004c2e:	d531      	bpl.n	8004c94 <__ssputs_r+0xa0>
 8004c30:	4629      	mov	r1, r5
 8004c32:	f000 fb53 	bl	80052dc <_malloc_r>
 8004c36:	4606      	mov	r6, r0
 8004c38:	b950      	cbnz	r0, 8004c50 <__ssputs_r+0x5c>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c40:	f8ca 3000 	str.w	r3, [sl]
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	464a      	mov	r2, r9
 8004c52:	6921      	ldr	r1, [r4, #16]
 8004c54:	f000 face 	bl	80051f4 <memcpy>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	6126      	str	r6, [r4, #16]
 8004c66:	444e      	add	r6, r9
 8004c68:	6026      	str	r6, [r4, #0]
 8004c6a:	463e      	mov	r6, r7
 8004c6c:	6165      	str	r5, [r4, #20]
 8004c6e:	eba5 0509 	sub.w	r5, r5, r9
 8004c72:	60a5      	str	r5, [r4, #8]
 8004c74:	42be      	cmp	r6, r7
 8004c76:	d900      	bls.n	8004c7a <__ssputs_r+0x86>
 8004c78:	463e      	mov	r6, r7
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	f000 fac6 	bl	8005210 <memmove>
 8004c84:	68a3      	ldr	r3, [r4, #8]
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	1b9b      	subs	r3, r3, r6
 8004c8a:	4432      	add	r2, r6
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	60a3      	str	r3, [r4, #8]
 8004c90:	6022      	str	r2, [r4, #0]
 8004c92:	e7db      	b.n	8004c4c <__ssputs_r+0x58>
 8004c94:	462a      	mov	r2, r5
 8004c96:	f000 fb7b 	bl	8005390 <_realloc_r>
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d1e1      	bne.n	8004c64 <__ssputs_r+0x70>
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	6921      	ldr	r1, [r4, #16]
 8004ca4:	f000 face 	bl	8005244 <_free_r>
 8004ca8:	e7c7      	b.n	8004c3a <__ssputs_r+0x46>
	...

08004cac <_svfiprintf_r>:
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	4698      	mov	r8, r3
 8004cb2:	898b      	ldrh	r3, [r1, #12]
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	460d      	mov	r5, r1
 8004cba:	4614      	mov	r4, r2
 8004cbc:	b09d      	sub	sp, #116	; 0x74
 8004cbe:	d50e      	bpl.n	8004cde <_svfiprintf_r+0x32>
 8004cc0:	690b      	ldr	r3, [r1, #16]
 8004cc2:	b963      	cbnz	r3, 8004cde <_svfiprintf_r+0x32>
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	f000 fb09 	bl	80052dc <_malloc_r>
 8004cca:	6028      	str	r0, [r5, #0]
 8004ccc:	6128      	str	r0, [r5, #16]
 8004cce:	b920      	cbnz	r0, 8004cda <_svfiprintf_r+0x2e>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd8:	e0d1      	b.n	8004e7e <_svfiprintf_r+0x1d2>
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	616b      	str	r3, [r5, #20]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ce8:	2330      	movs	r3, #48	; 0x30
 8004cea:	f04f 0901 	mov.w	r9, #1
 8004cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e98 <_svfiprintf_r+0x1ec>
 8004cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	469a      	mov	sl, r3
 8004cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d02:	b10a      	cbz	r2, 8004d08 <_svfiprintf_r+0x5c>
 8004d04:	2a25      	cmp	r2, #37	; 0x25
 8004d06:	d1f9      	bne.n	8004cfc <_svfiprintf_r+0x50>
 8004d08:	ebba 0b04 	subs.w	fp, sl, r4
 8004d0c:	d00b      	beq.n	8004d26 <_svfiprintf_r+0x7a>
 8004d0e:	465b      	mov	r3, fp
 8004d10:	4622      	mov	r2, r4
 8004d12:	4629      	mov	r1, r5
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff ff6d 	bl	8004bf4 <__ssputs_r>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f000 80aa 	beq.w	8004e74 <_svfiprintf_r+0x1c8>
 8004d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d22:	445a      	add	r2, fp
 8004d24:	9209      	str	r2, [sp, #36]	; 0x24
 8004d26:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80a2 	beq.w	8004e74 <_svfiprintf_r+0x1c8>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d3a:	f10a 0a01 	add.w	sl, sl, #1
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d46:	931a      	str	r3, [sp, #104]	; 0x68
 8004d48:	4654      	mov	r4, sl
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d50:	4851      	ldr	r0, [pc, #324]	; (8004e98 <_svfiprintf_r+0x1ec>)
 8004d52:	f000 fa41 	bl	80051d8 <memchr>
 8004d56:	9a04      	ldr	r2, [sp, #16]
 8004d58:	b9d8      	cbnz	r0, 8004d92 <_svfiprintf_r+0xe6>
 8004d5a:	06d0      	lsls	r0, r2, #27
 8004d5c:	bf44      	itt	mi
 8004d5e:	2320      	movmi	r3, #32
 8004d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d64:	0711      	lsls	r1, r2, #28
 8004d66:	bf44      	itt	mi
 8004d68:	232b      	movmi	r3, #43	; 0x2b
 8004d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d72:	2b2a      	cmp	r3, #42	; 0x2a
 8004d74:	d015      	beq.n	8004da2 <_svfiprintf_r+0xf6>
 8004d76:	4654      	mov	r4, sl
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f04f 0c0a 	mov.w	ip, #10
 8004d7e:	9a07      	ldr	r2, [sp, #28]
 8004d80:	4621      	mov	r1, r4
 8004d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d86:	3b30      	subs	r3, #48	; 0x30
 8004d88:	2b09      	cmp	r3, #9
 8004d8a:	d94e      	bls.n	8004e2a <_svfiprintf_r+0x17e>
 8004d8c:	b1b0      	cbz	r0, 8004dbc <_svfiprintf_r+0x110>
 8004d8e:	9207      	str	r2, [sp, #28]
 8004d90:	e014      	b.n	8004dbc <_svfiprintf_r+0x110>
 8004d92:	eba0 0308 	sub.w	r3, r0, r8
 8004d96:	fa09 f303 	lsl.w	r3, r9, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	46a2      	mov	sl, r4
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	e7d2      	b.n	8004d48 <_svfiprintf_r+0x9c>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	1d19      	adds	r1, r3, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	9103      	str	r1, [sp, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbb      	ittet	lt
 8004dae:	425b      	neglt	r3, r3
 8004db0:	f042 0202 	orrlt.w	r2, r2, #2
 8004db4:	9307      	strge	r3, [sp, #28]
 8004db6:	9307      	strlt	r3, [sp, #28]
 8004db8:	bfb8      	it	lt
 8004dba:	9204      	strlt	r2, [sp, #16]
 8004dbc:	7823      	ldrb	r3, [r4, #0]
 8004dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc0:	d10c      	bne.n	8004ddc <_svfiprintf_r+0x130>
 8004dc2:	7863      	ldrb	r3, [r4, #1]
 8004dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc6:	d135      	bne.n	8004e34 <_svfiprintf_r+0x188>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	3402      	adds	r4, #2
 8004dcc:	1d1a      	adds	r2, r3, #4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	9203      	str	r2, [sp, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bfb8      	it	lt
 8004dd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ea8 <_svfiprintf_r+0x1fc>
 8004de0:	2203      	movs	r2, #3
 8004de2:	4650      	mov	r0, sl
 8004de4:	7821      	ldrb	r1, [r4, #0]
 8004de6:	f000 f9f7 	bl	80051d8 <memchr>
 8004dea:	b140      	cbz	r0, 8004dfe <_svfiprintf_r+0x152>
 8004dec:	2340      	movs	r3, #64	; 0x40
 8004dee:	eba0 000a 	sub.w	r0, r0, sl
 8004df2:	fa03 f000 	lsl.w	r0, r3, r0
 8004df6:	9b04      	ldr	r3, [sp, #16]
 8004df8:	3401      	adds	r4, #1
 8004dfa:	4303      	orrs	r3, r0
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e02:	2206      	movs	r2, #6
 8004e04:	4825      	ldr	r0, [pc, #148]	; (8004e9c <_svfiprintf_r+0x1f0>)
 8004e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e0a:	f000 f9e5 	bl	80051d8 <memchr>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d038      	beq.n	8004e84 <_svfiprintf_r+0x1d8>
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <_svfiprintf_r+0x1f4>)
 8004e14:	bb1b      	cbnz	r3, 8004e5e <_svfiprintf_r+0x1b2>
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	3307      	adds	r3, #7
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	3308      	adds	r3, #8
 8004e20:	9303      	str	r3, [sp, #12]
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e24:	4433      	add	r3, r6
 8004e26:	9309      	str	r3, [sp, #36]	; 0x24
 8004e28:	e767      	b.n	8004cfa <_svfiprintf_r+0x4e>
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e32:	e7a5      	b.n	8004d80 <_svfiprintf_r+0xd4>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f04f 0c0a 	mov.w	ip, #10
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	3401      	adds	r4, #1
 8004e3e:	9305      	str	r3, [sp, #20]
 8004e40:	4620      	mov	r0, r4
 8004e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e46:	3a30      	subs	r2, #48	; 0x30
 8004e48:	2a09      	cmp	r2, #9
 8004e4a:	d903      	bls.n	8004e54 <_svfiprintf_r+0x1a8>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0c5      	beq.n	8004ddc <_svfiprintf_r+0x130>
 8004e50:	9105      	str	r1, [sp, #20]
 8004e52:	e7c3      	b.n	8004ddc <_svfiprintf_r+0x130>
 8004e54:	4604      	mov	r4, r0
 8004e56:	2301      	movs	r3, #1
 8004e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e5c:	e7f0      	b.n	8004e40 <_svfiprintf_r+0x194>
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4638      	mov	r0, r7
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <_svfiprintf_r+0x1f8>)
 8004e68:	a904      	add	r1, sp, #16
 8004e6a:	f3af 8000 	nop.w
 8004e6e:	1c42      	adds	r2, r0, #1
 8004e70:	4606      	mov	r6, r0
 8004e72:	d1d6      	bne.n	8004e22 <_svfiprintf_r+0x176>
 8004e74:	89ab      	ldrh	r3, [r5, #12]
 8004e76:	065b      	lsls	r3, r3, #25
 8004e78:	f53f af2c 	bmi.w	8004cd4 <_svfiprintf_r+0x28>
 8004e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e7e:	b01d      	add	sp, #116	; 0x74
 8004e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e84:	ab03      	add	r3, sp, #12
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <_svfiprintf_r+0x1f8>)
 8004e8e:	a904      	add	r1, sp, #16
 8004e90:	f000 f87c 	bl	8004f8c <_printf_i>
 8004e94:	e7eb      	b.n	8004e6e <_svfiprintf_r+0x1c2>
 8004e96:	bf00      	nop
 8004e98:	08005b4c 	.word	0x08005b4c
 8004e9c:	08005b56 	.word	0x08005b56
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	08004bf5 	.word	0x08004bf5
 8004ea8:	08005b52 	.word	0x08005b52

08004eac <_printf_common>:
 8004eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	4699      	mov	r9, r3
 8004eb4:	688a      	ldr	r2, [r1, #8]
 8004eb6:	690b      	ldr	r3, [r1, #16]
 8004eb8:	4607      	mov	r7, r0
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	bfb8      	it	lt
 8004ebe:	4613      	movlt	r3, r2
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ecc:	b10a      	cbz	r2, 8004ed2 <_printf_common+0x26>
 8004ece:	3301      	adds	r3, #1
 8004ed0:	6033      	str	r3, [r6, #0]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	0699      	lsls	r1, r3, #26
 8004ed6:	bf42      	ittt	mi
 8004ed8:	6833      	ldrmi	r3, [r6, #0]
 8004eda:	3302      	addmi	r3, #2
 8004edc:	6033      	strmi	r3, [r6, #0]
 8004ede:	6825      	ldr	r5, [r4, #0]
 8004ee0:	f015 0506 	ands.w	r5, r5, #6
 8004ee4:	d106      	bne.n	8004ef4 <_printf_common+0x48>
 8004ee6:	f104 0a19 	add.w	sl, r4, #25
 8004eea:	68e3      	ldr	r3, [r4, #12]
 8004eec:	6832      	ldr	r2, [r6, #0]
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	42ab      	cmp	r3, r5
 8004ef2:	dc28      	bgt.n	8004f46 <_printf_common+0x9a>
 8004ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ef8:	1e13      	subs	r3, r2, #0
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	bf18      	it	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	0692      	lsls	r2, r2, #26
 8004f02:	d42d      	bmi.n	8004f60 <_printf_common+0xb4>
 8004f04:	4649      	mov	r1, r9
 8004f06:	4638      	mov	r0, r7
 8004f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f0c:	47c0      	blx	r8
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d020      	beq.n	8004f54 <_printf_common+0xa8>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	68e5      	ldr	r5, [r4, #12]
 8004f16:	f003 0306 	and.w	r3, r3, #6
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	bf18      	it	ne
 8004f1e:	2500      	movne	r5, #0
 8004f20:	6832      	ldr	r2, [r6, #0]
 8004f22:	f04f 0600 	mov.w	r6, #0
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	bf08      	it	eq
 8004f2a:	1aad      	subeq	r5, r5, r2
 8004f2c:	6922      	ldr	r2, [r4, #16]
 8004f2e:	bf08      	it	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	4293      	cmp	r3, r2
 8004f36:	bfc4      	itt	gt
 8004f38:	1a9b      	subgt	r3, r3, r2
 8004f3a:	18ed      	addgt	r5, r5, r3
 8004f3c:	341a      	adds	r4, #26
 8004f3e:	42b5      	cmp	r5, r6
 8004f40:	d11a      	bne.n	8004f78 <_printf_common+0xcc>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e008      	b.n	8004f58 <_printf_common+0xac>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4652      	mov	r2, sl
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	47c0      	blx	r8
 8004f50:	3001      	adds	r0, #1
 8004f52:	d103      	bne.n	8004f5c <_printf_common+0xb0>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	e7c4      	b.n	8004eea <_printf_common+0x3e>
 8004f60:	2030      	movs	r0, #48	; 0x30
 8004f62:	18e1      	adds	r1, r4, r3
 8004f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f6e:	4422      	add	r2, r4
 8004f70:	3302      	adds	r3, #2
 8004f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f76:	e7c5      	b.n	8004f04 <_printf_common+0x58>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4638      	mov	r0, r7
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d0e6      	beq.n	8004f54 <_printf_common+0xa8>
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7d9      	b.n	8004f3e <_printf_common+0x92>
	...

08004f8c <_printf_i>:
 8004f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	460c      	mov	r4, r1
 8004f92:	7e27      	ldrb	r7, [r4, #24]
 8004f94:	4691      	mov	r9, r2
 8004f96:	2f78      	cmp	r7, #120	; 0x78
 8004f98:	4680      	mov	r8, r0
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa2:	d807      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fa4:	2f62      	cmp	r7, #98	; 0x62
 8004fa6:	d80a      	bhi.n	8004fbe <_printf_i+0x32>
 8004fa8:	2f00      	cmp	r7, #0
 8004faa:	f000 80d9 	beq.w	8005160 <_printf_i+0x1d4>
 8004fae:	2f58      	cmp	r7, #88	; 0x58
 8004fb0:	f000 80a4 	beq.w	80050fc <_printf_i+0x170>
 8004fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fbc:	e03a      	b.n	8005034 <_printf_i+0xa8>
 8004fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc2:	2b15      	cmp	r3, #21
 8004fc4:	d8f6      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fc6:	a001      	add	r0, pc, #4	; (adr r0, 8004fcc <_printf_i+0x40>)
 8004fc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fcc:	08005025 	.word	0x08005025
 8004fd0:	08005039 	.word	0x08005039
 8004fd4:	08004fb5 	.word	0x08004fb5
 8004fd8:	08004fb5 	.word	0x08004fb5
 8004fdc:	08004fb5 	.word	0x08004fb5
 8004fe0:	08004fb5 	.word	0x08004fb5
 8004fe4:	08005039 	.word	0x08005039
 8004fe8:	08004fb5 	.word	0x08004fb5
 8004fec:	08004fb5 	.word	0x08004fb5
 8004ff0:	08004fb5 	.word	0x08004fb5
 8004ff4:	08004fb5 	.word	0x08004fb5
 8004ff8:	08005147 	.word	0x08005147
 8004ffc:	08005069 	.word	0x08005069
 8005000:	08005129 	.word	0x08005129
 8005004:	08004fb5 	.word	0x08004fb5
 8005008:	08004fb5 	.word	0x08004fb5
 800500c:	08005169 	.word	0x08005169
 8005010:	08004fb5 	.word	0x08004fb5
 8005014:	08005069 	.word	0x08005069
 8005018:	08004fb5 	.word	0x08004fb5
 800501c:	08004fb5 	.word	0x08004fb5
 8005020:	08005131 	.word	0x08005131
 8005024:	680b      	ldr	r3, [r1, #0]
 8005026:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	600a      	str	r2, [r1, #0]
 8005030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005034:	2301      	movs	r3, #1
 8005036:	e0a4      	b.n	8005182 <_printf_i+0x1f6>
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	6808      	ldr	r0, [r1, #0]
 800503c:	062e      	lsls	r6, r5, #24
 800503e:	f100 0304 	add.w	r3, r0, #4
 8005042:	d50a      	bpl.n	800505a <_printf_i+0xce>
 8005044:	6805      	ldr	r5, [r0, #0]
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	2d00      	cmp	r5, #0
 800504a:	da03      	bge.n	8005054 <_printf_i+0xc8>
 800504c:	232d      	movs	r3, #45	; 0x2d
 800504e:	426d      	negs	r5, r5
 8005050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005054:	230a      	movs	r3, #10
 8005056:	485e      	ldr	r0, [pc, #376]	; (80051d0 <_printf_i+0x244>)
 8005058:	e019      	b.n	800508e <_printf_i+0x102>
 800505a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800505e:	6805      	ldr	r5, [r0, #0]
 8005060:	600b      	str	r3, [r1, #0]
 8005062:	bf18      	it	ne
 8005064:	b22d      	sxthne	r5, r5
 8005066:	e7ef      	b.n	8005048 <_printf_i+0xbc>
 8005068:	680b      	ldr	r3, [r1, #0]
 800506a:	6825      	ldr	r5, [r4, #0]
 800506c:	1d18      	adds	r0, r3, #4
 800506e:	6008      	str	r0, [r1, #0]
 8005070:	0628      	lsls	r0, r5, #24
 8005072:	d501      	bpl.n	8005078 <_printf_i+0xec>
 8005074:	681d      	ldr	r5, [r3, #0]
 8005076:	e002      	b.n	800507e <_printf_i+0xf2>
 8005078:	0669      	lsls	r1, r5, #25
 800507a:	d5fb      	bpl.n	8005074 <_printf_i+0xe8>
 800507c:	881d      	ldrh	r5, [r3, #0]
 800507e:	2f6f      	cmp	r7, #111	; 0x6f
 8005080:	bf0c      	ite	eq
 8005082:	2308      	moveq	r3, #8
 8005084:	230a      	movne	r3, #10
 8005086:	4852      	ldr	r0, [pc, #328]	; (80051d0 <_printf_i+0x244>)
 8005088:	2100      	movs	r1, #0
 800508a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800508e:	6866      	ldr	r6, [r4, #4]
 8005090:	2e00      	cmp	r6, #0
 8005092:	bfa8      	it	ge
 8005094:	6821      	ldrge	r1, [r4, #0]
 8005096:	60a6      	str	r6, [r4, #8]
 8005098:	bfa4      	itt	ge
 800509a:	f021 0104 	bicge.w	r1, r1, #4
 800509e:	6021      	strge	r1, [r4, #0]
 80050a0:	b90d      	cbnz	r5, 80050a6 <_printf_i+0x11a>
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	d04d      	beq.n	8005142 <_printf_i+0x1b6>
 80050a6:	4616      	mov	r6, r2
 80050a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ac:	fb03 5711 	mls	r7, r3, r1, r5
 80050b0:	5dc7      	ldrb	r7, [r0, r7]
 80050b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050b6:	462f      	mov	r7, r5
 80050b8:	42bb      	cmp	r3, r7
 80050ba:	460d      	mov	r5, r1
 80050bc:	d9f4      	bls.n	80050a8 <_printf_i+0x11c>
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d10b      	bne.n	80050da <_printf_i+0x14e>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	07df      	lsls	r7, r3, #31
 80050c6:	d508      	bpl.n	80050da <_printf_i+0x14e>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	6861      	ldr	r1, [r4, #4]
 80050cc:	4299      	cmp	r1, r3
 80050ce:	bfde      	ittt	le
 80050d0:	2330      	movle	r3, #48	; 0x30
 80050d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050d6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80050da:	1b92      	subs	r2, r2, r6
 80050dc:	6122      	str	r2, [r4, #16]
 80050de:	464b      	mov	r3, r9
 80050e0:	4621      	mov	r1, r4
 80050e2:	4640      	mov	r0, r8
 80050e4:	f8cd a000 	str.w	sl, [sp]
 80050e8:	aa03      	add	r2, sp, #12
 80050ea:	f7ff fedf 	bl	8004eac <_printf_common>
 80050ee:	3001      	adds	r0, #1
 80050f0:	d14c      	bne.n	800518c <_printf_i+0x200>
 80050f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f6:	b004      	add	sp, #16
 80050f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fc:	4834      	ldr	r0, [pc, #208]	; (80051d0 <_printf_i+0x244>)
 80050fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005102:	680e      	ldr	r6, [r1, #0]
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	f856 5b04 	ldr.w	r5, [r6], #4
 800510a:	061f      	lsls	r7, r3, #24
 800510c:	600e      	str	r6, [r1, #0]
 800510e:	d514      	bpl.n	800513a <_printf_i+0x1ae>
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	bf44      	itt	mi
 8005114:	f043 0320 	orrmi.w	r3, r3, #32
 8005118:	6023      	strmi	r3, [r4, #0]
 800511a:	b91d      	cbnz	r5, 8005124 <_printf_i+0x198>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f023 0320 	bic.w	r3, r3, #32
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	2310      	movs	r3, #16
 8005126:	e7af      	b.n	8005088 <_printf_i+0xfc>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	f043 0320 	orr.w	r3, r3, #32
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	2378      	movs	r3, #120	; 0x78
 8005132:	4828      	ldr	r0, [pc, #160]	; (80051d4 <_printf_i+0x248>)
 8005134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005138:	e7e3      	b.n	8005102 <_printf_i+0x176>
 800513a:	065e      	lsls	r6, r3, #25
 800513c:	bf48      	it	mi
 800513e:	b2ad      	uxthmi	r5, r5
 8005140:	e7e6      	b.n	8005110 <_printf_i+0x184>
 8005142:	4616      	mov	r6, r2
 8005144:	e7bb      	b.n	80050be <_printf_i+0x132>
 8005146:	680b      	ldr	r3, [r1, #0]
 8005148:	6826      	ldr	r6, [r4, #0]
 800514a:	1d1d      	adds	r5, r3, #4
 800514c:	6960      	ldr	r0, [r4, #20]
 800514e:	600d      	str	r5, [r1, #0]
 8005150:	0635      	lsls	r5, r6, #24
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	d501      	bpl.n	800515a <_printf_i+0x1ce>
 8005156:	6018      	str	r0, [r3, #0]
 8005158:	e002      	b.n	8005160 <_printf_i+0x1d4>
 800515a:	0671      	lsls	r1, r6, #25
 800515c:	d5fb      	bpl.n	8005156 <_printf_i+0x1ca>
 800515e:	8018      	strh	r0, [r3, #0]
 8005160:	2300      	movs	r3, #0
 8005162:	4616      	mov	r6, r2
 8005164:	6123      	str	r3, [r4, #16]
 8005166:	e7ba      	b.n	80050de <_printf_i+0x152>
 8005168:	680b      	ldr	r3, [r1, #0]
 800516a:	1d1a      	adds	r2, r3, #4
 800516c:	600a      	str	r2, [r1, #0]
 800516e:	681e      	ldr	r6, [r3, #0]
 8005170:	2100      	movs	r1, #0
 8005172:	4630      	mov	r0, r6
 8005174:	6862      	ldr	r2, [r4, #4]
 8005176:	f000 f82f 	bl	80051d8 <memchr>
 800517a:	b108      	cbz	r0, 8005180 <_printf_i+0x1f4>
 800517c:	1b80      	subs	r0, r0, r6
 800517e:	6060      	str	r0, [r4, #4]
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	2300      	movs	r3, #0
 8005186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800518a:	e7a8      	b.n	80050de <_printf_i+0x152>
 800518c:	4632      	mov	r2, r6
 800518e:	4649      	mov	r1, r9
 8005190:	4640      	mov	r0, r8
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	47d0      	blx	sl
 8005196:	3001      	adds	r0, #1
 8005198:	d0ab      	beq.n	80050f2 <_printf_i+0x166>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	079b      	lsls	r3, r3, #30
 800519e:	d413      	bmi.n	80051c8 <_printf_i+0x23c>
 80051a0:	68e0      	ldr	r0, [r4, #12]
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	4298      	cmp	r0, r3
 80051a6:	bfb8      	it	lt
 80051a8:	4618      	movlt	r0, r3
 80051aa:	e7a4      	b.n	80050f6 <_printf_i+0x16a>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4632      	mov	r2, r6
 80051b0:	4649      	mov	r1, r9
 80051b2:	4640      	mov	r0, r8
 80051b4:	47d0      	blx	sl
 80051b6:	3001      	adds	r0, #1
 80051b8:	d09b      	beq.n	80050f2 <_printf_i+0x166>
 80051ba:	3501      	adds	r5, #1
 80051bc:	68e3      	ldr	r3, [r4, #12]
 80051be:	9903      	ldr	r1, [sp, #12]
 80051c0:	1a5b      	subs	r3, r3, r1
 80051c2:	42ab      	cmp	r3, r5
 80051c4:	dcf2      	bgt.n	80051ac <_printf_i+0x220>
 80051c6:	e7eb      	b.n	80051a0 <_printf_i+0x214>
 80051c8:	2500      	movs	r5, #0
 80051ca:	f104 0619 	add.w	r6, r4, #25
 80051ce:	e7f5      	b.n	80051bc <_printf_i+0x230>
 80051d0:	08005b5d 	.word	0x08005b5d
 80051d4:	08005b6e 	.word	0x08005b6e

080051d8 <memchr>:
 80051d8:	4603      	mov	r3, r0
 80051da:	b510      	push	{r4, lr}
 80051dc:	b2c9      	uxtb	r1, r1
 80051de:	4402      	add	r2, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	d101      	bne.n	80051ea <memchr+0x12>
 80051e6:	2000      	movs	r0, #0
 80051e8:	e003      	b.n	80051f2 <memchr+0x1a>
 80051ea:	7804      	ldrb	r4, [r0, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	428c      	cmp	r4, r1
 80051f0:	d1f6      	bne.n	80051e0 <memchr+0x8>
 80051f2:	bd10      	pop	{r4, pc}

080051f4 <memcpy>:
 80051f4:	440a      	add	r2, r1
 80051f6:	4291      	cmp	r1, r2
 80051f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051fc:	d100      	bne.n	8005200 <memcpy+0xc>
 80051fe:	4770      	bx	lr
 8005200:	b510      	push	{r4, lr}
 8005202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005206:	4291      	cmp	r1, r2
 8005208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520c:	d1f9      	bne.n	8005202 <memcpy+0xe>
 800520e:	bd10      	pop	{r4, pc}

08005210 <memmove>:
 8005210:	4288      	cmp	r0, r1
 8005212:	b510      	push	{r4, lr}
 8005214:	eb01 0402 	add.w	r4, r1, r2
 8005218:	d902      	bls.n	8005220 <memmove+0x10>
 800521a:	4284      	cmp	r4, r0
 800521c:	4623      	mov	r3, r4
 800521e:	d807      	bhi.n	8005230 <memmove+0x20>
 8005220:	1e43      	subs	r3, r0, #1
 8005222:	42a1      	cmp	r1, r4
 8005224:	d008      	beq.n	8005238 <memmove+0x28>
 8005226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800522e:	e7f8      	b.n	8005222 <memmove+0x12>
 8005230:	4601      	mov	r1, r0
 8005232:	4402      	add	r2, r0
 8005234:	428a      	cmp	r2, r1
 8005236:	d100      	bne.n	800523a <memmove+0x2a>
 8005238:	bd10      	pop	{r4, pc}
 800523a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800523e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005242:	e7f7      	b.n	8005234 <memmove+0x24>

08005244 <_free_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4605      	mov	r5, r0
 8005248:	2900      	cmp	r1, #0
 800524a:	d043      	beq.n	80052d4 <_free_r+0x90>
 800524c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005250:	1f0c      	subs	r4, r1, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	bfb8      	it	lt
 8005256:	18e4      	addlt	r4, r4, r3
 8005258:	f000 f8d0 	bl	80053fc <__malloc_lock>
 800525c:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <_free_r+0x94>)
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	4610      	mov	r0, r2
 8005262:	b933      	cbnz	r3, 8005272 <_free_r+0x2e>
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	6014      	str	r4, [r2, #0]
 8005268:	4628      	mov	r0, r5
 800526a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800526e:	f000 b8cb 	b.w	8005408 <__malloc_unlock>
 8005272:	42a3      	cmp	r3, r4
 8005274:	d90a      	bls.n	800528c <_free_r+0x48>
 8005276:	6821      	ldr	r1, [r4, #0]
 8005278:	1862      	adds	r2, r4, r1
 800527a:	4293      	cmp	r3, r2
 800527c:	bf01      	itttt	eq
 800527e:	681a      	ldreq	r2, [r3, #0]
 8005280:	685b      	ldreq	r3, [r3, #4]
 8005282:	1852      	addeq	r2, r2, r1
 8005284:	6022      	streq	r2, [r4, #0]
 8005286:	6063      	str	r3, [r4, #4]
 8005288:	6004      	str	r4, [r0, #0]
 800528a:	e7ed      	b.n	8005268 <_free_r+0x24>
 800528c:	461a      	mov	r2, r3
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	b10b      	cbz	r3, 8005296 <_free_r+0x52>
 8005292:	42a3      	cmp	r3, r4
 8005294:	d9fa      	bls.n	800528c <_free_r+0x48>
 8005296:	6811      	ldr	r1, [r2, #0]
 8005298:	1850      	adds	r0, r2, r1
 800529a:	42a0      	cmp	r0, r4
 800529c:	d10b      	bne.n	80052b6 <_free_r+0x72>
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	4401      	add	r1, r0
 80052a2:	1850      	adds	r0, r2, r1
 80052a4:	4283      	cmp	r3, r0
 80052a6:	6011      	str	r1, [r2, #0]
 80052a8:	d1de      	bne.n	8005268 <_free_r+0x24>
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4401      	add	r1, r0
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	6053      	str	r3, [r2, #4]
 80052b4:	e7d8      	b.n	8005268 <_free_r+0x24>
 80052b6:	d902      	bls.n	80052be <_free_r+0x7a>
 80052b8:	230c      	movs	r3, #12
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	e7d4      	b.n	8005268 <_free_r+0x24>
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	1821      	adds	r1, r4, r0
 80052c2:	428b      	cmp	r3, r1
 80052c4:	bf01      	itttt	eq
 80052c6:	6819      	ldreq	r1, [r3, #0]
 80052c8:	685b      	ldreq	r3, [r3, #4]
 80052ca:	1809      	addeq	r1, r1, r0
 80052cc:	6021      	streq	r1, [r4, #0]
 80052ce:	6063      	str	r3, [r4, #4]
 80052d0:	6054      	str	r4, [r2, #4]
 80052d2:	e7c9      	b.n	8005268 <_free_r+0x24>
 80052d4:	bd38      	pop	{r3, r4, r5, pc}
 80052d6:	bf00      	nop
 80052d8:	20000090 	.word	0x20000090

080052dc <_malloc_r>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	1ccd      	adds	r5, r1, #3
 80052e0:	f025 0503 	bic.w	r5, r5, #3
 80052e4:	3508      	adds	r5, #8
 80052e6:	2d0c      	cmp	r5, #12
 80052e8:	bf38      	it	cc
 80052ea:	250c      	movcc	r5, #12
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	4606      	mov	r6, r0
 80052f0:	db01      	blt.n	80052f6 <_malloc_r+0x1a>
 80052f2:	42a9      	cmp	r1, r5
 80052f4:	d903      	bls.n	80052fe <_malloc_r+0x22>
 80052f6:	230c      	movs	r3, #12
 80052f8:	6033      	str	r3, [r6, #0]
 80052fa:	2000      	movs	r0, #0
 80052fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fe:	f000 f87d 	bl	80053fc <__malloc_lock>
 8005302:	4921      	ldr	r1, [pc, #132]	; (8005388 <_malloc_r+0xac>)
 8005304:	680a      	ldr	r2, [r1, #0]
 8005306:	4614      	mov	r4, r2
 8005308:	b99c      	cbnz	r4, 8005332 <_malloc_r+0x56>
 800530a:	4f20      	ldr	r7, [pc, #128]	; (800538c <_malloc_r+0xb0>)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	b923      	cbnz	r3, 800531a <_malloc_r+0x3e>
 8005310:	4621      	mov	r1, r4
 8005312:	4630      	mov	r0, r6
 8005314:	f000 f862 	bl	80053dc <_sbrk_r>
 8005318:	6038      	str	r0, [r7, #0]
 800531a:	4629      	mov	r1, r5
 800531c:	4630      	mov	r0, r6
 800531e:	f000 f85d 	bl	80053dc <_sbrk_r>
 8005322:	1c43      	adds	r3, r0, #1
 8005324:	d123      	bne.n	800536e <_malloc_r+0x92>
 8005326:	230c      	movs	r3, #12
 8005328:	4630      	mov	r0, r6
 800532a:	6033      	str	r3, [r6, #0]
 800532c:	f000 f86c 	bl	8005408 <__malloc_unlock>
 8005330:	e7e3      	b.n	80052fa <_malloc_r+0x1e>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	1b5b      	subs	r3, r3, r5
 8005336:	d417      	bmi.n	8005368 <_malloc_r+0x8c>
 8005338:	2b0b      	cmp	r3, #11
 800533a:	d903      	bls.n	8005344 <_malloc_r+0x68>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	441c      	add	r4, r3
 8005340:	6025      	str	r5, [r4, #0]
 8005342:	e004      	b.n	800534e <_malloc_r+0x72>
 8005344:	6863      	ldr	r3, [r4, #4]
 8005346:	42a2      	cmp	r2, r4
 8005348:	bf0c      	ite	eq
 800534a:	600b      	streq	r3, [r1, #0]
 800534c:	6053      	strne	r3, [r2, #4]
 800534e:	4630      	mov	r0, r6
 8005350:	f000 f85a 	bl	8005408 <__malloc_unlock>
 8005354:	f104 000b 	add.w	r0, r4, #11
 8005358:	1d23      	adds	r3, r4, #4
 800535a:	f020 0007 	bic.w	r0, r0, #7
 800535e:	1ac2      	subs	r2, r0, r3
 8005360:	d0cc      	beq.n	80052fc <_malloc_r+0x20>
 8005362:	1a1b      	subs	r3, r3, r0
 8005364:	50a3      	str	r3, [r4, r2]
 8005366:	e7c9      	b.n	80052fc <_malloc_r+0x20>
 8005368:	4622      	mov	r2, r4
 800536a:	6864      	ldr	r4, [r4, #4]
 800536c:	e7cc      	b.n	8005308 <_malloc_r+0x2c>
 800536e:	1cc4      	adds	r4, r0, #3
 8005370:	f024 0403 	bic.w	r4, r4, #3
 8005374:	42a0      	cmp	r0, r4
 8005376:	d0e3      	beq.n	8005340 <_malloc_r+0x64>
 8005378:	1a21      	subs	r1, r4, r0
 800537a:	4630      	mov	r0, r6
 800537c:	f000 f82e 	bl	80053dc <_sbrk_r>
 8005380:	3001      	adds	r0, #1
 8005382:	d1dd      	bne.n	8005340 <_malloc_r+0x64>
 8005384:	e7cf      	b.n	8005326 <_malloc_r+0x4a>
 8005386:	bf00      	nop
 8005388:	20000090 	.word	0x20000090
 800538c:	20000094 	.word	0x20000094

08005390 <_realloc_r>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	4607      	mov	r7, r0
 8005394:	4614      	mov	r4, r2
 8005396:	460e      	mov	r6, r1
 8005398:	b921      	cbnz	r1, 80053a4 <_realloc_r+0x14>
 800539a:	4611      	mov	r1, r2
 800539c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053a0:	f7ff bf9c 	b.w	80052dc <_malloc_r>
 80053a4:	b922      	cbnz	r2, 80053b0 <_realloc_r+0x20>
 80053a6:	f7ff ff4d 	bl	8005244 <_free_r>
 80053aa:	4625      	mov	r5, r4
 80053ac:	4628      	mov	r0, r5
 80053ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b0:	f000 f830 	bl	8005414 <_malloc_usable_size_r>
 80053b4:	42a0      	cmp	r0, r4
 80053b6:	d20f      	bcs.n	80053d8 <_realloc_r+0x48>
 80053b8:	4621      	mov	r1, r4
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7ff ff8e 	bl	80052dc <_malloc_r>
 80053c0:	4605      	mov	r5, r0
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0f2      	beq.n	80053ac <_realloc_r+0x1c>
 80053c6:	4631      	mov	r1, r6
 80053c8:	4622      	mov	r2, r4
 80053ca:	f7ff ff13 	bl	80051f4 <memcpy>
 80053ce:	4631      	mov	r1, r6
 80053d0:	4638      	mov	r0, r7
 80053d2:	f7ff ff37 	bl	8005244 <_free_r>
 80053d6:	e7e9      	b.n	80053ac <_realloc_r+0x1c>
 80053d8:	4635      	mov	r5, r6
 80053da:	e7e7      	b.n	80053ac <_realloc_r+0x1c>

080053dc <_sbrk_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	2300      	movs	r3, #0
 80053e0:	4d05      	ldr	r5, [pc, #20]	; (80053f8 <_sbrk_r+0x1c>)
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	f7fc fa28 	bl	800183c <_sbrk>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_sbrk_r+0x1a>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_sbrk_r+0x1a>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	20000270 	.word	0x20000270

080053fc <__malloc_lock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	; (8005404 <__malloc_lock+0x8>)
 80053fe:	f000 b811 	b.w	8005424 <__retarget_lock_acquire_recursive>
 8005402:	bf00      	nop
 8005404:	20000278 	.word	0x20000278

08005408 <__malloc_unlock>:
 8005408:	4801      	ldr	r0, [pc, #4]	; (8005410 <__malloc_unlock+0x8>)
 800540a:	f000 b80c 	b.w	8005426 <__retarget_lock_release_recursive>
 800540e:	bf00      	nop
 8005410:	20000278 	.word	0x20000278

08005414 <_malloc_usable_size_r>:
 8005414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005418:	1f18      	subs	r0, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	bfbc      	itt	lt
 800541e:	580b      	ldrlt	r3, [r1, r0]
 8005420:	18c0      	addlt	r0, r0, r3
 8005422:	4770      	bx	lr

08005424 <__retarget_lock_acquire_recursive>:
 8005424:	4770      	bx	lr

08005426 <__retarget_lock_release_recursive>:
 8005426:	4770      	bx	lr

08005428 <_init>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	bf00      	nop
 800542c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542e:	bc08      	pop	{r3}
 8005430:	469e      	mov	lr, r3
 8005432:	4770      	bx	lr

08005434 <_fini>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr
